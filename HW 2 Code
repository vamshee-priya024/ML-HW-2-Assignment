{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "aobiceTlaBiJ"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import random as rnd\n",
        "import pandas as pd\n",
        "\n",
        "# visualization\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "# machine learning\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import SVC, LinearSVC\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.linear_model import Perceptron\n",
        "from sklearn.linear_model import SGDClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df = pd.read_csv('/content/drive/MyDrive/ML Assignment/train.csv')\n",
        "test_df = pd.read_csv('/content/drive/MyDrive/ML Assignment/test.csv')\n",
        "combine = [train_df, test_df]"
      ],
      "metadata": {
        "id": "tterLE3WaPkn"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(train_df.columns.values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M8ztP-WEbmD2",
        "outputId": "689c9650-a03f-4a45-b9bd-3b0ba6878b70"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['PassengerId' 'Survived' 'Pclass' 'Name' 'Sex' 'Age' 'SibSp' 'Parch'\n",
            " 'Ticket' 'Fare' 'Cabin' 'Embarked']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "4331fmVudXpg",
        "outputId": "a028c028-81a2-43ad-e29b-867f53cb513b"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Survived  Pclass  \\\n",
              "0            1         0       3   \n",
              "1            2         1       1   \n",
              "2            3         1       3   \n",
              "3            4         1       1   \n",
              "4            5         0       3   \n",
              "\n",
              "                                                Name     Sex   Age  SibSp  \\\n",
              "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                           Allen, Mr. William Henry    male  35.0      0   \n",
              "\n",
              "   Parch            Ticket     Fare Cabin Embarked  \n",
              "0      0         A/5 21171   7.2500   NaN        S  \n",
              "1      0          PC 17599  71.2833   C85        C  \n",
              "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
              "3      0            113803  53.1000  C123        S  \n",
              "4      0            373450   8.0500   NaN        S  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b703cd85-d41a-4334-874b-9385fe46e0ec\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b703cd85-d41a-4334-874b-9385fe46e0ec')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b703cd85-d41a-4334-874b-9385fe46e0ec button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b703cd85-d41a-4334-874b-9385fe46e0ec');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.info()\n",
        "print('_'*40)\n",
        "test_df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eqN8HnxTda5W",
        "outputId": "a1d80784-4917-41d7-fa9f-4f451ae27f6a"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 12 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  891 non-null    int64  \n",
            " 1   Survived     891 non-null    int64  \n",
            " 2   Pclass       891 non-null    int64  \n",
            " 3   Name         891 non-null    object \n",
            " 4   Sex          891 non-null    object \n",
            " 5   Age          714 non-null    float64\n",
            " 6   SibSp        891 non-null    int64  \n",
            " 7   Parch        891 non-null    int64  \n",
            " 8   Ticket       891 non-null    object \n",
            " 9   Fare         891 non-null    float64\n",
            " 10  Cabin        204 non-null    object \n",
            " 11  Embarked     889 non-null    object \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 83.7+ KB\n",
            "________________________________________\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 418 entries, 0 to 417\n",
            "Data columns (total 11 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  418 non-null    int64  \n",
            " 1   Pclass       418 non-null    int64  \n",
            " 2   Name         418 non-null    object \n",
            " 3   Sex          418 non-null    object \n",
            " 4   Age          332 non-null    float64\n",
            " 5   SibSp        418 non-null    int64  \n",
            " 6   Parch        418 non-null    int64  \n",
            " 7   Ticket       418 non-null    object \n",
            " 8   Fare         417 non-null    float64\n",
            " 9   Cabin        91 non-null     object \n",
            " 10  Embarked     418 non-null    object \n",
            "dtypes: float64(2), int64(4), object(5)\n",
            "memory usage: 36.0+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "LzWrjUzye4bd",
        "outputId": "f678ee07-5c41-4d5b-9ddf-268a80e3b860"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
              "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
              "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
              "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
              "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
              "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
              "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
              "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
              "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
              "\n",
              "            Parch        Fare  \n",
              "count  891.000000  891.000000  \n",
              "mean     0.381594   32.204208  \n",
              "std      0.806057   49.693429  \n",
              "min      0.000000    0.000000  \n",
              "25%      0.000000    7.910400  \n",
              "50%      0.000000   14.454200  \n",
              "75%      0.000000   31.000000  \n",
              "max      6.000000  512.329200  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-de16044a-b94e-4e75-b309-d16d652841a7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>714.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.383838</td>\n",
              "      <td>2.308642</td>\n",
              "      <td>29.699118</td>\n",
              "      <td>0.523008</td>\n",
              "      <td>0.381594</td>\n",
              "      <td>32.204208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>257.353842</td>\n",
              "      <td>0.486592</td>\n",
              "      <td>0.836071</td>\n",
              "      <td>14.526497</td>\n",
              "      <td>1.102743</td>\n",
              "      <td>0.806057</td>\n",
              "      <td>49.693429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.420000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>223.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>20.125000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.910400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.454200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>668.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>31.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>512.329200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de16044a-b94e-4e75-b309-d16d652841a7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-de16044a-b94e-4e75-b309-d16d652841a7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-de16044a-b94e-4e75-b309-d16d652841a7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.describe(include=['O'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "h4kyblQJfIKa",
        "outputId": "9b442e9a-ce1c-40df-e1ee-f821f33c702c"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           Name   Sex  Ticket    Cabin Embarked\n",
              "count                       891   891     891      204      889\n",
              "unique                      891     2     681      147        3\n",
              "top     Braund, Mr. Owen Harris  male  347082  B96 B98        S\n",
              "freq                          1   577       7        4      644"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1f40d12f-e18c-41b9-8652-d7d1e18d4f2d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>891</td>\n",
              "      <td>891</td>\n",
              "      <td>891</td>\n",
              "      <td>204</td>\n",
              "      <td>889</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>891</td>\n",
              "      <td>2</td>\n",
              "      <td>681</td>\n",
              "      <td>147</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>347082</td>\n",
              "      <td>B96 B98</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>1</td>\n",
              "      <td>577</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>644</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1f40d12f-e18c-41b9-8652-d7d1e18d4f2d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1f40d12f-e18c-41b9-8652-d7d1e18d4f2d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1f40d12f-e18c-41b9-8652-d7d1e18d4f2d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE ADDED HERE\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "plt.figure(figsize=(16,5))\n",
        "plt.subplot(1,2,1)\n",
        "sns.distplot(train_df['Age'])\n",
        "plt.subplot(1,2,2)\n",
        "sns.distplot(train_df['Fare'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 305
        },
        "id": "ADEBdnIWbuVz",
        "outputId": "3dd0104d-3fd2-4d1a-a008-0138bfbd5a34"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x360 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(train_df['Fare'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "zb9QziohfCE-",
        "outputId": "f9dc0464-7ac4-43d6-eb03-ef220dd2a592"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c9e379b10>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(train_df['Age'])"
      ],
      "metadata": {
        "id": "qtZ716SUlbUC",
        "outputId": "8830b8ee-69d6-4fe6-94b6-7f753bb0d2e2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c9de66e50>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE ADDED HERE \n",
        "#OUTLIER DETECTION AND REMOVAL\n",
        "Q1 = train_df.quantile(0.35)\n",
        "Q3 = train_df.quantile(0.65)\n",
        "IQR = Q3 - Q1\n",
        "print(IQR)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ugNixNRLjE3j",
        "outputId": "3d383292-7f24-4ada-f021-7ee9ca345b1d"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PassengerId    267.0\n",
            "Survived         1.0\n",
            "Pclass           1.0\n",
            "Age             10.0\n",
            "SibSp            0.0\n",
            "Parch            0.0\n",
            "Fare            17.0\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df = train_df[~((train_df < (Q1 - 1.5 * IQR)) |(train_df > (Q3 + 1.5 * IQR))).any(axis=1)]\n",
        "train_df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JeDRmeODjR4Y",
        "outputId": "87837d69-fa8e-46b0-88d7-858bd30298cb"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(446, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "AdOcMmQ4fmAt",
        "outputId": "89001194-a50b-46ae-e37f-f877229c4715"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Pclass  Survived\n",
              "0       1  0.462963\n",
              "1       2  0.367816\n",
              "2       3  0.203279"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-88d81786-2a85-49b2-9feb-217c591b881c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.462963</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0.367816</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0.203279</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88d81786-2a85-49b2-9feb-217c591b881c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-88d81786-2a85-49b2-9feb-217c591b881c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-88d81786-2a85-49b2-9feb-217c591b881c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "tmg47idTftQO",
        "outputId": "aca4456a-06ac-4c70-93a7-2bee6774babd"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Sex  Survived\n",
              "0  female  0.728261\n",
              "1    male  0.146893"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-318800d3-76be-4cde-bbff-08a692f3a749\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sex</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>female</td>\n",
              "      <td>0.728261</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>male</td>\n",
              "      <td>0.146893</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-318800d3-76be-4cde-bbff-08a692f3a749')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-318800d3-76be-4cde-bbff-08a692f3a749 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-318800d3-76be-4cde-bbff-08a692f3a749');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "XVrx1VqsgMnH",
        "outputId": "3a2193c9-d2ed-4f7a-8d3f-23ec9db2d72a"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   SibSp  Survived\n",
              "0      0  0.266816"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-029f9f1c-2c04-4632-a2cd-9cd2023c8fd0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0.266816</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-029f9f1c-2c04-4632-a2cd-9cd2023c8fd0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-029f9f1c-2c04-4632-a2cd-9cd2023c8fd0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-029f9f1c-2c04-4632-a2cd-9cd2023c8fd0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "G_tNFUKRgO_Y",
        "outputId": "a25f68b2-a48c-421c-b3c0-e7857b996694"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Parch  Survived\n",
              "0      0  0.266816"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-953965d1-3a71-4797-996d-53128936aefe\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Parch</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0.266816</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-953965d1-3a71-4797-996d-53128936aefe')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-953965d1-3a71-4797-996d-53128936aefe button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-953965d1-3a71-4797-996d-53128936aefe');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.FacetGrid(train_df, col='Survived')\n",
        "g.map(plt.hist, 'Age', bins=20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        },
        "id": "YGc_YZzNgQxc",
        "outputId": "7fad27c8-d892-45b3-d558-8a86d8240710"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f7c9ddfdd90>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x216 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', size=2.2, aspect=1.6)\n",
        "grid.map(plt.hist, 'Age', alpha=.5, bins=20)\n",
        "grid.add_legend();"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "zIZQCCHCgbPj",
        "outputId": "4ac05b01-5630-42f2-bd82-15ff83842789"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 514.88x475.2 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid = sns.FacetGrid(train_df, row='Embarked', size=2.2, aspect=1.6)\n",
        "grid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\n",
        "grid.add_legend()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "id": "Q-4ooocmg9cI",
        "outputId": "e22c5341-e087-430d-ef35-305a3343641c"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f7c9b2c4750>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 323.94x475.2 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid = sns.FacetGrid(train_df, row='Embarked', col='Survived', size=2.2, aspect=1.6)\n",
        "grid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\n",
        "grid.add_legend()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "id": "yS8yeGvrhJjb",
        "outputId": "f10194d8-51f6-4a78-a376-36a1d8b9e6f1"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f7c9b0e4650>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 514.88x475.2 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Before\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape)\n",
        "\n",
        "train_df = train_df.drop(['Ticket','Cabin'], axis=1)\n",
        "test_df = test_df.drop(['Ticket','Cabin'], axis=1)\n",
        "combine = [train_df, test_df]\n",
        "\n",
        "\"After\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0ny-vCxOjLsk",
        "outputId": "5091e8f8-5322-465e-9497-c4fcba62192c"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Before (446, 12) (418, 11) (891, 12) (418, 11)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "('After', (446, 10), (418, 9), (446, 10), (418, 9))"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for dataset in combine:\n",
        "    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n",
        "\n",
        "pd.crosstab(train_df['Title'], train_df['Sex'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "gwDxiC6ljPiS",
        "outputId": "e5ba9807-7d21-4479-9303-208cf50e965e"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Sex       female  male\n",
              "Title                 \n",
              "Don            0     1\n",
              "Dr             1     3\n",
              "Jonkheer       0     1\n",
              "Major          0     1\n",
              "Miss          74     0\n",
              "Mlle           1     0\n",
              "Mr             0   346\n",
              "Mrs           15     0\n",
              "Ms             1     0\n",
              "Rev            0     2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-37ee7896-0d60-444c-b036-9228ac16f1f8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Sex</th>\n",
              "      <th>female</th>\n",
              "      <th>male</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Title</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Don</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Dr</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Jonkheer</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Major</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miss</th>\n",
              "      <td>74</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mlle</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mr</th>\n",
              "      <td>0</td>\n",
              "      <td>346</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mrs</th>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ms</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rev</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-37ee7896-0d60-444c-b036-9228ac16f1f8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-37ee7896-0d60-444c-b036-9228ac16f1f8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-37ee7896-0d60-444c-b036-9228ac16f1f8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for dataset in combine:\n",
        "    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n",
        " \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n",
        "\n",
        "    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n",
        "    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n",
        "    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n",
        "    \n",
        "train_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "ijp05RJLjUc8",
        "outputId": "63d8252a-13fa-4377-e441-ec77fcaa1c44"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Title  Survived\n",
              "0  Miss  0.684211\n",
              "1    Mr  0.147399\n",
              "2   Mrs  0.933333\n",
              "3  Rare  0.222222"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-be2121de-33ab-451e-bded-88860a8b437d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Title</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Miss</td>\n",
              "      <td>0.684211</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Mr</td>\n",
              "      <td>0.147399</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Mrs</td>\n",
              "      <td>0.933333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Rare</td>\n",
              "      <td>0.222222</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-be2121de-33ab-451e-bded-88860a8b437d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-be2121de-33ab-451e-bded-88860a8b437d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-be2121de-33ab-451e-bded-88860a8b437d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n",
        "for dataset in combine:\n",
        "    dataset['Title'] = dataset['Title'].map(title_mapping)\n",
        "    dataset['Title'] = dataset['Title'].fillna(0)\n",
        "\n",
        "train_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "_4eFEtCwjhy4",
        "outputId": "6f21dc52-2598-4355-8e9c-27b3b9cb7427"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    PassengerId  Survived  Pclass                                  Name  \\\n",
              "2             3         1       3                Heikkinen, Miss. Laina   \n",
              "4             5         0       3              Allen, Mr. William Henry   \n",
              "5             6         0       3                      Moran, Mr. James   \n",
              "12           13         0       3        Saundercock, Mr. William Henry   \n",
              "14           15         0       3  Vestrom, Miss. Hulda Amanda Adolfina   \n",
              "\n",
              "       Sex   Age  SibSp  Parch    Fare Embarked  Title  \n",
              "2   female  26.0      0      0  7.9250        S      2  \n",
              "4     male  35.0      0      0  8.0500        S      1  \n",
              "5     male   NaN      0      0  8.4583        Q      1  \n",
              "12    male  20.0      0      0  8.0500        S      1  \n",
              "14  female  14.0      0      0  7.8542        S      2  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-64e9dec4-17f9-4a99-82b0-7322193f379b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Title</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Moran, Mr. James</td>\n",
              "      <td>male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.4583</td>\n",
              "      <td>Q</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Saundercock, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>20.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Vestrom, Miss. Hulda Amanda Adolfina</td>\n",
              "      <td>female</td>\n",
              "      <td>14.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.8542</td>\n",
              "      <td>S</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-64e9dec4-17f9-4a99-82b0-7322193f379b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-64e9dec4-17f9-4a99-82b0-7322193f379b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-64e9dec4-17f9-4a99-82b0-7322193f379b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df = train_df.drop(['Name', 'PassengerId'], axis=1)\n",
        "test_df = test_df.drop(['Name'], axis=1)\n",
        "combine = [train_df, test_df]\n",
        "train_df.shape, test_df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5JjuX51Hjr9D",
        "outputId": "246b1565-8c70-41a5-ed2e-6d153b771831"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((446, 9), (418, 9))"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for dataset in combine:\n",
        "    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n",
        "\n",
        "train_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "gJVM4ehYjuLr",
        "outputId": "9b245c15-048c-4384-dee9-30c14c507973"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Survived  Pclass  Sex   Age  SibSp  Parch    Fare Embarked  Title\n",
              "2          1       3    1  26.0      0      0  7.9250        S      2\n",
              "4          0       3    0  35.0      0      0  8.0500        S      1\n",
              "5          0       3    0   NaN      0      0  8.4583        Q      1\n",
              "12         0       3    0  20.0      0      0  8.0500        S      1\n",
              "14         0       3    1  14.0      0      0  7.8542        S      2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d979bbf1-7f8d-4bbd-8f9a-6d20908acb2e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Title</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.4583</td>\n",
              "      <td>Q</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>14.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.8542</td>\n",
              "      <td>S</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d979bbf1-7f8d-4bbd-8f9a-6d20908acb2e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d979bbf1-7f8d-4bbd-8f9a-6d20908acb2e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d979bbf1-7f8d-4bbd-8f9a-6d20908acb2e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid = sns.FacetGrid(train_df, row='Pclass', col='Sex', size=2.2, aspect=1.6)\n",
        "grid.map(plt.hist, 'Age', alpha=.5, bins=20)\n",
        "grid.add_legend()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "id": "s5erAcpyjwdE",
        "outputId": "bcfc9cfd-de55-4604-c6cc-74bc8425e1bf"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f7c9e5f8090>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 514.88x475.2 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "guess_ages = np.zeros((2,3))\n",
        "guess_ages"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ldgfdtcBjyiM",
        "outputId": "4671161b-2486-4d7c-e5fd-6167043d82c5"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0., 0., 0.],\n",
              "       [0., 0., 0.]])"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for dataset in combine:\n",
        "    for i in range(0, 2):\n",
        "        for j in range(0, 3):\n",
        "            guess_df = dataset[(dataset['Sex'] == i) & \\\n",
        "                                  (dataset['Pclass'] == j+1)]['Age'].dropna()\n",
        "\n",
        "            # age_mean = guess_df.mean()\n",
        "            # age_std = guess_df.std()\n",
        "            # age_guess = rnd.uniform(age_mean - age_std, age_mean + age_std)\n",
        "\n",
        "            age_guess = guess_df.median()\n",
        "\n",
        "            # Convert random age float to nearest .5 age\n",
        "            guess_ages[i,j] = int( age_guess/0.5 + 0.5 ) * 0.5\n",
        "            \n",
        "    for i in range(0, 2):\n",
        "        for j in range(0, 3):\n",
        "            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n",
        "                    'Age'] = guess_ages[i,j]\n",
        "\n",
        "    dataset['Age'] = dataset['Age'].astype(int)\n",
        "\n",
        "train_df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "CAXlxuFqj0kf",
        "outputId": "aa3fc2e2-1eab-4be8-ce9f-1455ff2e34fb"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Survived  Pclass  Sex  Age  SibSp  Parch    Fare Embarked  Title\n",
              "2          1       3    1   26      0      0  7.9250        S      2\n",
              "4          0       3    0   35      0      0  8.0500        S      1\n",
              "5          0       3    0   26      0      0  8.4583        Q      1\n",
              "12         0       3    0   20      0      0  8.0500        S      1\n",
              "14         0       3    1   14      0      0  7.8542        S      2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ba725926-525b-4c27-9238-4f2ed5b12b20\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Title</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.4583</td>\n",
              "      <td>Q</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>14</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.8542</td>\n",
              "      <td>S</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba725926-525b-4c27-9238-4f2ed5b12b20')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ba725926-525b-4c27-9238-4f2ed5b12b20 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ba725926-525b-4c27-9238-4f2ed5b12b20');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\n",
        "train_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "o_W5v6xrj7N4",
        "outputId": "5c5b6174-820d-4928-aa80-e4d5d6bea3d6"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          AgeBand  Survived\n",
              "0  (10.962, 18.6]  0.333333\n",
              "1    (18.6, 26.2]  0.209524\n",
              "2    (26.2, 33.8]  0.340206\n",
              "3    (33.8, 41.4]  0.281690\n",
              "4    (41.4, 49.0]  0.314286"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-639ec9ad-1782-438c-b6b2-131a4672a8bc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AgeBand</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>(10.962, 18.6]</td>\n",
              "      <td>0.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>(18.6, 26.2]</td>\n",
              "      <td>0.209524</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>(26.2, 33.8]</td>\n",
              "      <td>0.340206</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>(33.8, 41.4]</td>\n",
              "      <td>0.281690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>(41.4, 49.0]</td>\n",
              "      <td>0.314286</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-639ec9ad-1782-438c-b6b2-131a4672a8bc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-639ec9ad-1782-438c-b6b2-131a4672a8bc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-639ec9ad-1782-438c-b6b2-131a4672a8bc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for dataset in combine:    \n",
        "    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n",
        "    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n",
        "    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n",
        "    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n",
        "    dataset.loc[ dataset['Age'] > 64, 'Age']\n",
        "train_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Jlwdaj7Nj9yU",
        "outputId": "2bb57139-244b-497e-a44d-06c063a3c1e7"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Survived  Pclass  Sex  Age  SibSp  Parch    Fare Embarked  Title  \\\n",
              "2          1       3    1    1      0      0  7.9250        S      2   \n",
              "4          0       3    0    2      0      0  8.0500        S      1   \n",
              "5          0       3    0    1      0      0  8.4583        Q      1   \n",
              "12         0       3    0    1      0      0  8.0500        S      1   \n",
              "14         0       3    1    0      0      0  7.8542        S      2   \n",
              "\n",
              "           AgeBand  \n",
              "2     (18.6, 26.2]  \n",
              "4     (33.8, 41.4]  \n",
              "5     (18.6, 26.2]  \n",
              "12    (18.6, 26.2]  \n",
              "14  (10.962, 18.6]  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-790939a6-5ec6-44e1-84d2-bebe56cbf3a0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Title</th>\n",
              "      <th>AgeBand</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "      <td>2</td>\n",
              "      <td>(18.6, 26.2]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>1</td>\n",
              "      <td>(33.8, 41.4]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.4583</td>\n",
              "      <td>Q</td>\n",
              "      <td>1</td>\n",
              "      <td>(18.6, 26.2]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>1</td>\n",
              "      <td>(18.6, 26.2]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.8542</td>\n",
              "      <td>S</td>\n",
              "      <td>2</td>\n",
              "      <td>(10.962, 18.6]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-790939a6-5ec6-44e1-84d2-bebe56cbf3a0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-790939a6-5ec6-44e1-84d2-bebe56cbf3a0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-790939a6-5ec6-44e1-84d2-bebe56cbf3a0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df = train_df.drop(['AgeBand'], axis=1)\n",
        "combine = [train_df, test_df]\n",
        "train_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "n8jIH5kxkJZk",
        "outputId": "95dbcffc-d1d0-4c11-882d-fed31483df64"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Survived  Pclass  Sex  Age  SibSp  Parch    Fare Embarked  Title\n",
              "2          1       3    1    1      0      0  7.9250        S      2\n",
              "4          0       3    0    2      0      0  8.0500        S      1\n",
              "5          0       3    0    1      0      0  8.4583        Q      1\n",
              "12         0       3    0    1      0      0  8.0500        S      1\n",
              "14         0       3    1    0      0      0  7.8542        S      2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f6d69899-4f23-4bcc-bee8-3cd0e1bfc14f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Title</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.4583</td>\n",
              "      <td>Q</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.8542</td>\n",
              "      <td>S</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f6d69899-4f23-4bcc-bee8-3cd0e1bfc14f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f6d69899-4f23-4bcc-bee8-3cd0e1bfc14f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f6d69899-4f23-4bcc-bee8-3cd0e1bfc14f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for dataset in combine:\n",
        "    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n",
        "\n",
        "train_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "Q0OawSgEkLLy",
        "outputId": "54a4693c-f19e-4683-fe5e-052008376a9b"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   FamilySize  Survived\n",
              "0           1  0.266816"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5e2ba1ea-7ec3-4187-a284-045e9b9248d7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>FamilySize</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.266816</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5e2ba1ea-7ec3-4187-a284-045e9b9248d7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5e2ba1ea-7ec3-4187-a284-045e9b9248d7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5e2ba1ea-7ec3-4187-a284-045e9b9248d7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for dataset in combine:\n",
        "    dataset['IsAlone'] = 0\n",
        "    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n",
        "\n",
        "train_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "WpXI-7jbkYHM",
        "outputId": "bc8cdddb-f4b7-408a-d450-261a2c8925d8"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   IsAlone  Survived\n",
              "0        1  0.266816"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-211ae0ec-a142-4a77-ae18-a6d608b1fe7f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>IsAlone</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.266816</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-211ae0ec-a142-4a77-ae18-a6d608b1fe7f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-211ae0ec-a142-4a77-ae18-a6d608b1fe7f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-211ae0ec-a142-4a77-ae18-a6d608b1fe7f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df = train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\n",
        "test_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\n",
        "combine = [train_df, test_df]\n",
        "\n",
        "train_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "TpH1E3r3kaK5",
        "outputId": "c6cd6966-1310-4198-9151-6a8205a192de"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Survived  Pclass  Sex  Age    Fare Embarked  Title  IsAlone\n",
              "2          1       3    1    1  7.9250        S      2        1\n",
              "4          0       3    0    2  8.0500        S      1        1\n",
              "5          0       3    0    1  8.4583        Q      1        1\n",
              "12         0       3    0    1  8.0500        S      1        1\n",
              "14         0       3    1    0  7.8542        S      2        1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e0e32433-3d19-4e06-9f9e-a615f1e22ae9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Title</th>\n",
              "      <th>IsAlone</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>8.4583</td>\n",
              "      <td>Q</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7.8542</td>\n",
              "      <td>S</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e0e32433-3d19-4e06-9f9e-a615f1e22ae9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e0e32433-3d19-4e06-9f9e-a615f1e22ae9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e0e32433-3d19-4e06-9f9e-a615f1e22ae9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for dataset in combine:\n",
        "    dataset['Age*Class'] = dataset.Age * dataset.Pclass\n",
        "\n",
        "train_df.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "-psw3l-3kcIo",
        "outputId": "2dd24748-765e-41f4-ecee-b2734d2550e9"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Age*Class  Age  Pclass\n",
              "2           3    1       3\n",
              "4           6    2       3\n",
              "5           3    1       3\n",
              "12          3    1       3\n",
              "14          0    0       3\n",
              "17          2    1       2\n",
              "19          3    1       3\n",
              "20          4    2       2\n",
              "21          4    2       2\n",
              "22          0    0       3"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1a40b4de-7bf2-4109-85af-e0afd1ed583b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age*Class</th>\n",
              "      <th>Age</th>\n",
              "      <th>Pclass</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1a40b4de-7bf2-4109-85af-e0afd1ed583b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1a40b4de-7bf2-4109-85af-e0afd1ed583b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1a40b4de-7bf2-4109-85af-e0afd1ed583b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "freq_port = train_df.Embarked.dropna().mode()[0]\n",
        "freq_port"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "49wbmby0kd3Q",
        "outputId": "302491bd-b7a8-4b38-d64e-791e5826194a"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'S'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for dataset in combine:\n",
        "    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n",
        "    \n",
        "train_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "SFeoQLBJkfpW",
        "outputId": "b7b8e102-2a7d-424e-ceda-796fa88b3409"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Embarked  Survived\n",
              "1        Q  0.425926\n",
              "0        C  0.338983\n",
              "2        S  0.228228"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ee4a7c45-368c-4d82-b4e2-5065dc5a1cbe\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Q</td>\n",
              "      <td>0.425926</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>C</td>\n",
              "      <td>0.338983</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>S</td>\n",
              "      <td>0.228228</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ee4a7c45-368c-4d82-b4e2-5065dc5a1cbe')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ee4a7c45-368c-4d82-b4e2-5065dc5a1cbe button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ee4a7c45-368c-4d82-b4e2-5065dc5a1cbe');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for dataset in combine:\n",
        "    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n",
        "\n",
        "train_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "SBnNsMJckhkl",
        "outputId": "a485cba0-21a1-47c7-8172-a623e2575c93"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Survived  Pclass  Sex  Age    Fare  Embarked  Title  IsAlone  Age*Class\n",
              "2          1       3    1    1  7.9250         0      2        1          3\n",
              "4          0       3    0    2  8.0500         0      1        1          6\n",
              "5          0       3    0    1  8.4583         2      1        1          3\n",
              "12         0       3    0    1  8.0500         0      1        1          3\n",
              "14         0       3    1    0  7.8542         0      2        1          0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7987e483-df1d-48b6-922f-1a98c8fe77b0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Title</th>\n",
              "      <th>IsAlone</th>\n",
              "      <th>Age*Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>8.4583</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7.8542</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7987e483-df1d-48b6-922f-1a98c8fe77b0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7987e483-df1d-48b6-922f-1a98c8fe77b0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7987e483-df1d-48b6-922f-1a98c8fe77b0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\n",
        "test_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "vpFKvtQdkjfd",
        "outputId": "2b3d7d61-8bbf-42b7-f7b4-d99667fd8a2a"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Pclass  Sex  Age     Fare  Embarked  Title  IsAlone  Age*Class\n",
              "0          892       3    0    2   7.8292         2      1        1          6\n",
              "1          893       3    1    2   7.0000         0      3        0          6\n",
              "2          894       2    0    3   9.6875         2      1        1          6\n",
              "3          895       3    0    1   8.6625         0      1        1          3\n",
              "4          896       3    1    1  12.2875         0      3        0          3"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f7f95150-44a4-40a5-b854-0fce5b372a47\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Title</th>\n",
              "      <th>IsAlone</th>\n",
              "      <th>Age*Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>892</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>7.8292</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>893</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>7.0000</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>894</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>9.6875</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>895</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>8.6625</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>896</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>12.2875</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f7f95150-44a4-40a5-b854-0fce5b372a47')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f7f95150-44a4-40a5-b854-0fce5b372a47 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f7f95150-44a4-40a5-b854-0fce5b372a47');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\n",
        "train_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "KOGtHvoRklVy",
        "outputId": "cf37e593-7050-456c-9c0a-641b509c6127"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         FareBand  Survived\n",
              "0  (-0.001, 7.75]  0.230159\n",
              "1    (7.75, 8.05]  0.190840\n",
              "2    (8.05, 13.0]  0.288288\n",
              "3  (13.0, 50.496]  0.423077"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1ccacfa0-3879-4548-be64-f940e0ea84cd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>FareBand</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>(-0.001, 7.75]</td>\n",
              "      <td>0.230159</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>(7.75, 8.05]</td>\n",
              "      <td>0.190840</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>(8.05, 13.0]</td>\n",
              "      <td>0.288288</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>(13.0, 50.496]</td>\n",
              "      <td>0.423077</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ccacfa0-3879-4548-be64-f940e0ea84cd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1ccacfa0-3879-4548-be64-f940e0ea84cd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1ccacfa0-3879-4548-be64-f940e0ea84cd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for dataset in combine:\n",
        "    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n",
        "    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n",
        "    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n",
        "    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n",
        "    dataset['Fare'] = dataset['Fare'].astype(int)\n",
        "\n",
        "train_df = train_df.drop(['FareBand'], axis=1)\n",
        "combine = [train_df, test_df]\n",
        "    \n",
        "train_df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "xJuqn4fekm-k",
        "outputId": "49d4a67f-945f-41f3-e62f-157d6ab366cc"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Survived  Pclass  Sex  Age  Fare  Embarked  Title  IsAlone  Age*Class\n",
              "2          1       3    1    1     1         0      2        1          3\n",
              "4          0       3    0    2     1         0      1        1          6\n",
              "5          0       3    0    1     1         2      1        1          3\n",
              "12         0       3    0    1     1         0      1        1          3\n",
              "14         0       3    1    0     0         0      2        1          0\n",
              "17         1       2    0    1     1         0      1        1          2\n",
              "19         1       3    1    1     0         1      3        1          3\n",
              "20         0       2    0    2     2         0      1        1          4\n",
              "21         1       2    0    2     1         0      1        1          4\n",
              "22         1       3    1    0     1         2      2        1          0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d808e2e4-4dca-49aa-a01c-bdeccf2db525\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Title</th>\n",
              "      <th>IsAlone</th>\n",
              "      <th>Age*Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d808e2e4-4dca-49aa-a01c-bdeccf2db525')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d808e2e4-4dca-49aa-a01c-bdeccf2db525 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d808e2e4-4dca-49aa-a01c-bdeccf2db525');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TnDKAjgqMwWF",
        "outputId": "f7e6f27a-421c-48a8-d8d9-a5c5ca1a8f79"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Survived', 'Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'Title',\n",
              "       'IsAlone', 'Age*Class'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "_lP2tEoWO7O5",
        "outputId": "e2f52dbf-16d7-4242-c384-9c8a1fb57a25"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Survived  Pclass  Sex  Age  Fare  Embarked  Title  IsAlone  Age*Class\n",
              "2          1       3    1    1     1         0      2        1          3\n",
              "4          0       3    0    2     1         0      1        1          6\n",
              "5          0       3    0    1     1         2      1        1          3\n",
              "12         0       3    0    1     1         0      1        1          3\n",
              "14         0       3    1    0     0         0      2        1          0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f33c646b-660f-47f3-9448-e6b7e2fcc8ff\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Title</th>\n",
              "      <th>IsAlone</th>\n",
              "      <th>Age*Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f33c646b-660f-47f3-9448-e6b7e2fcc8ff')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f33c646b-660f-47f3-9448-e6b7e2fcc8ff button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f33c646b-660f-47f3-9448-e6b7e2fcc8ff');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE ADDED HERE\n",
        "#NORMALIZATION\n",
        "#Import library\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "X_train = train_df.drop(\"Survived\", axis=1)\n",
        "\n",
        "sc_X = StandardScaler()\n",
        "sc_X = sc_X.fit_transform(X_train)\n",
        "#Convert to table format - StandardScaler \n",
        "X_train= pd.DataFrame(data=sc_X, columns=['Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'Title','IsAlone', 'Age*Class'])\n",
        "X_train.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "leCrY49eMkU2",
        "outputId": "56d58ba3-93c1-47a7-e6c3-545c0c486d58"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Pclass       Sex       Age      Fare  Embarked     Title  IsAlone  \\\n",
              "0  0.625743  1.961588 -0.459106  0.320126 -0.542502  0.939436      0.0   \n",
              "1  0.625743 -0.509791  1.548356  0.320126 -0.542502 -0.438815      0.0   \n",
              "2  0.625743 -0.509791 -0.459106  0.320126  2.355175 -0.438815      0.0   \n",
              "3  0.625743 -0.509791 -0.459106  0.320126 -0.542502 -0.438815      0.0   \n",
              "4  0.625743  1.961588 -2.466567 -0.921405 -0.542502  0.939436      0.0   \n",
              "\n",
              "   Age*Class  \n",
              "0    0.00000  \n",
              "1    2.34171  \n",
              "2    0.00000  \n",
              "3    0.00000  \n",
              "4   -2.34171  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-82b05021-07d5-473f-abe3-010e7e3690a5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Title</th>\n",
              "      <th>IsAlone</th>\n",
              "      <th>Age*Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.625743</td>\n",
              "      <td>1.961588</td>\n",
              "      <td>-0.459106</td>\n",
              "      <td>0.320126</td>\n",
              "      <td>-0.542502</td>\n",
              "      <td>0.939436</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.625743</td>\n",
              "      <td>-0.509791</td>\n",
              "      <td>1.548356</td>\n",
              "      <td>0.320126</td>\n",
              "      <td>-0.542502</td>\n",
              "      <td>-0.438815</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.34171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.625743</td>\n",
              "      <td>-0.509791</td>\n",
              "      <td>-0.459106</td>\n",
              "      <td>0.320126</td>\n",
              "      <td>2.355175</td>\n",
              "      <td>-0.438815</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.625743</td>\n",
              "      <td>-0.509791</td>\n",
              "      <td>-0.459106</td>\n",
              "      <td>0.320126</td>\n",
              "      <td>-0.542502</td>\n",
              "      <td>-0.438815</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.625743</td>\n",
              "      <td>1.961588</td>\n",
              "      <td>-2.466567</td>\n",
              "      <td>-0.921405</td>\n",
              "      <td>-0.542502</td>\n",
              "      <td>0.939436</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-2.34171</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-82b05021-07d5-473f-abe3-010e7e3690a5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-82b05021-07d5-473f-abe3-010e7e3690a5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-82b05021-07d5-473f-abe3-010e7e3690a5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "u41IpxHWko7-",
        "outputId": "9d31d59b-dbc6-477c-ba2a-146ab0489d8c"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Pclass  Sex  Age  Fare  Embarked  Title  IsAlone  Age*Class\n",
              "0          892       3    0    2     0         2      1        1          6\n",
              "1          893       3    1    2     0         0      3        0          6\n",
              "2          894       2    0    3     1         2      1        1          6\n",
              "3          895       3    0    1     1         0      1        1          3\n",
              "4          896       3    1    1     1         0      3        0          3\n",
              "5          897       3    0    0     1         0      1        1          0\n",
              "6          898       3    1    1     0         2      2        1          3\n",
              "7          899       2    0    1     2         0      1        0          2\n",
              "8          900       3    1    1     0         1      3        1          3\n",
              "9          901       3    0    1     2         0      1        0          3"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a1711df5-72d1-4a33-9481-3e1c9db8f5be\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Title</th>\n",
              "      <th>IsAlone</th>\n",
              "      <th>Age*Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>892</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>893</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>894</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>895</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>896</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>897</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>898</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>899</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>900</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>901</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a1711df5-72d1-4a33-9481-3e1c9db8f5be')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a1711df5-72d1-4a33-9481-3e1c9db8f5be button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a1711df5-72d1-4a33-9481-3e1c9db8f5be');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.hist(figsize=(10,10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 791
        },
        "id": "4tvEdSi-_wa_",
        "outputId": "c6c34119-1281-4881-e3aa-3c30c8eacb8b"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f7c9b29eed0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f7c9b3a7850>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f7c9b449e50>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f7c9b3e4490>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f7c9ad53a90>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f7c9ad140d0>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f7c9ad4b750>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f7c9ad02c90>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f7c9ad02cd0>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 9 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAloAAAJOCAYAAABvHKlnAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzde7xcZX3v8c9XiIBACSF0GyASPEYtSI0QASvarWi5qcGqHJBCotR4gaqn6akBewSLtLGnQBW8NApN0HATxETAS8RsKZ4GBARCQCRAaBID4RICAUV3+J0/1rNhMpmdPXv2PDNrZn/fr9e89lrPuv1mZZ6s31rPs9ZSRGBmZmZmzfeSdgdgZmZm1q2caJmZmZll4kTLzMzMLBMnWmZmZmaZONEyMzMzy8SJlpmZmVkmTrQ6nKSvS/o/GdZ7pqRvN3u9ZrlI6pW0ut1xmJlVcqKViaRDJf0/SRskPSHp55Le2OztRMTHIuKsZq/XrN0krZT0W0kbJT0iaZ6kndodl1knadWxyAbnRCsDSX8EXAOcD4wD9gQ+Dzw3zPVIkv+NbDR7d0TsBBwATAX+oc3xmHWMZh2LbGR8EM/j1QARcWlEbIqI30bEjyPizuomOUmTJIWkbdN4n6SzJf0ceBb435JuqVy5pP8laVEanifpC2n4HknvqphvW0mPSjogjR+SzmyelHSHpN6KefeR9DNJT0taDIzPtXPMhisi1gA/AF4naZyk/5D0G0nrJX2v1jKSZku6P/2m75b03oppr0q/9w2SHpN0eSqXpPMkrZP0lKRlkl7Xmm9p1nSDHosAJH04HTfWS/qRpL1T+Wck3VRxXPq4pOWStm/fV+lcTrTy+DWwSdJ8SUdK2nWYy58IzAR2Br4OvEbS5IrpHwQuqbHcpcDxFeOHA49FxG2S9gSuBb5AcWbzd8BVknZP814C3EqRYJ0FTB9mzGbZSJoIHAX8EvgW8DJgP+CPgfMGWex+4C3ALhRn8d+WNCFNOwv4MbArsBfFGT/AXwBvpThA7QIcCzze5K9j1iqDHoskTQNOB/4S2B34T4pjCMD/pbjq9Q/p2PNPwF9FxO9aGn2XcKKVQUQ8BRwKBPAN4FFJiyT11LmKeRGxPCL6I2IDsJCUQKUf/WuBRTWWuwR4j6SXpfEP8mLF+Svguoi4LiKej4jFwC3AUZJeAbwR+D8R8VxE3AB8f7jf2yyD70l6ErgR+BnwVeBI4GMRsT4i/hARP6u1YER8JyJ+k37vlwP3AQelyX8A9gb2iIjfRcSNFeU7U9QxRcQ9EbE239czy2eIY9HHgH9Ov/F+imRqiqS9I+J54CTgkxTHmn+JiF+251t0PidamaQf74yI2At4HbAH8G91Lr6qavwSXrxS9UHgexHxbI1trgDuAd6dkq338OKVr72BD6RmwyfTwetQYEKKbX1EPFOxuofqjNUsp2MiYmxE7B0RnwAmAk9ExPqhFpR0kqTbK37vr+PFJvG/BwTcnJpEPgwQET8FLgC+AqyTNDf1czHrSFs5Fu0NfKmifjxBUSf2TMutBJYAkyjqgzXIiVYLRMSvgHkUP/JnKJo9Bry81iJV44uB3SVNoUi4ajUbDhhoPpwG3J2SLyiSt2+lg9bAZ8eImAOsBXaVtGPFel5R37cza6lVwDhJY7c2U+pr8g3gVGC3iBgL3EVxICEiHo6Ij0TEHsBHga9KelWa9uWIOBDYl6IJ8X9n+zZmLVR1LFoFfLTqmLBDRPw/AElHA28CrqdoSrQGOdHKQNJrJc2StFcan0iR/CwFbgfeKukVknYBThtqfRHxB+A7FD/2cRSJ12Auo+hn8nE2T8i+TXGl63BJ20jaXsVzh/aKiIcomhE/L+mlkg4F3j3c722WW2rG+wFFYrSrpDGS3lpj1h0pTlgeBZD0IYqDC2n8AwP1E1if5n1e0hslHSxpDMVJ0e+A5/N9I7N8hjgWfR04TdJ+adoukj6QhscD3wT+mqK/7rslHdWO79ANnGjl8TRwMHCTpGcoftR3AbNS36jLgTspOp9fU+c6LwHeAXwntafXlA5E/wX8WdrOQPkqiqtcp1McfFZRnKkP/AY+mGJ+AjgDuLjOuMxa7USKvlS/AtYBn66eISLuBs6hqAuPAPsDP6+Y5Y0U9XMjRR+UT0XEA8AfUVwJW0/RfP44Ppu3zrW1Y9HVwBeByyQ9lcqPTMvNBRamPr2PAycD35S0W8u/QRdQRHUrlZmZmZk1g69omZmZmWXiRMvMzMwsEydaZmZmZpk40TIzMzPLZNt2BwAwfvz4mDRpUs1pzzzzDDvuuGPNaa1WpligXPF0Siy33nrrYxGxe82JJed6MnyOZXDdWE9cRxpTpng6JZZh1ZGIaPvnwAMPjMEsWbJk0GmtVqZYIsoVT6fEAtwSJfjNN/JxPRk+xzK4bqwnriONKVM8nRLLcOqImw7NzMzMMnGiZWZmZpaJEy0zMzOzTJxomZmZmWXiRMvMzMwsk1I83mFrlq3ZwIzZ1w57uZVzjs4QjVltkrYHbgC2o6hXV0bEGZL2AS4DdqN4ifiJEfF7SdtRvLj7QIoXF//PiFjZluCto01q4P9HgHlHlOMW+lbxscTaxVe0zJrjOeDtEfF6YApwhKRDgC8C50XEq4D1wMlp/pOB9an8vDSfmZl1GSdaZk2QHq2yMY2OSZ8A3g5cmcrnA8ek4WlpnDT9MElqUbhmZtYipW86NOsUkrahaB58FfAV4H7gyYjoT7OsBvZMw3sCqwAiol/SBormxceq1jkTmAnQ09NDX19fzW1v3Lhx0Gmt5lhqyxXLrP37h56phjLtG7Nu5kTLrEkiYhMwRdJY4GrgtU1Y51xgLsDUqVOjt7e35nx9fX0MNq3VHEttuWJppN8RFH20yrJvzLqZmw7NmiwingSWAG8CxkoaOKHZC1iThtcAEwHS9F0oOsWbmVkXcaJl1gSSdk9XspC0A/BO4B6KhOv9abbpwMI0vCiNk6b/NL0/y8zMuoibDs2aYwIwP/XTeglwRURcI+lu4DJJXwB+CVyY5r8Q+JakFcATwHHtCNrMzPJyomXWBBFxJ/CGGuUPAAfVKP8d8IEWhGZmZm00ZNOhpO0l3SzpDknLJX0+le8j6SZJKyRdLumlqXy7NL4iTZ+U9yuYmZmZlVM9fbT8IEYzMzOzBgyZaPlBjGZmZmaNqauPVjsfxNizQ2MP5MvxIL6yPeCvTPE4FjMzsy3VlWi180GM5y9YyDnLht9nf+UJtdc3EmV6+CGUKx7HYmZmtqVhPUfLD2I0MzMzq189dx36QYxmZmZmDainTc4PYjQzMzNrwJCJlh/EaGZmZtYYv+vQzMzMLBMnWmZmlp3fMmKjlRMtMzNrBb9lxEYlJ1pmZpad3zJio9XwnwRqZmbWAL9lpFC2t1eUKZ5ujMWJltkISZoIXAz0UJyhz42IL0k6E/gI8Gia9fSIuC4tcxpF08gm4JMR8aOWB27WYn7LSKFsb68oUzzdGIsTLbOR6wdmRcRtknYGbpW0OE07LyL+tXJmSftSPF9uP2AP4CeSXp0OQmZdLyKelLTZW0bSVa1abxlZ7beMWCdzHy2zEYqItRFxWxp+muLNCXtuZZFpwGUR8VxEPAisoMYz6cy6id8yYqOVr2iZNVG6Bf0NwE3Am4FTJZ0E3EJx1Ws9RRK2tGKxyn4p1eurq/9JN/ZraIbREEsj/Y6gLfvGbxmxUcmJllmTSNoJuAr4dEQ8JelrwFkU/bbOAs4BPjycddbb/6Qb+zU0w2iIZcbsaxtabt4RO7Z03/gtIzZauenQrAkkjaFIshZExHcBIuKRiNgUEc8D3+DFg8lA35MBlf1SzMysizjRMhuh9GyfC4F7IuLcivIJFbO9F7grDS8CjktPvt4HmAzc3Kp4zcysddx0aDZybwZOBJZJuj2VnQ4cL2kKRdPhSuCjABGxXNIVwN0Udyye4jsOzcy605CJlp8RZLZ1EXEjUOuJ1ddtZZmzgbOzBWVmZqVQzxUtPyPIzMzMrAFD9tHyM4LMzMzMGjOsPlrNfEaQ3081cmWKx7GYmZltqe5Eq9nPCPL7qUauTPE4FjMzsy3V9XgHPyPIzMzMbPiGTLT8jCAzMzOzxtTTJudnBJmZmZk1YMhEy88IMjMzM2uMX8FjZmZmlokTLTMzM7NMnGiZmZmZZeJEy8zMzCwTJ1pmZmZmmTjRMjMzM8vEiZaZmZlZJk60zJpA0kRJSyTdLWm5pE+l8nGSFku6L/3dNZVL0pclrZB0p6QD2vsNzMwsBydaZs3RD8yKiH2BQ4BTJO0LzAauj4jJwPVpHOBIitdTTQZmAl9rfchmZpabEy2zJoiItRFxWxp+GrgH2BOYBsxPs80HjknD04CLo7AUGFv1/lAzM+sC9bzr0MyGQdIk4A3ATUBPRKxNkx4GetLwnsCqisVWp7K1FWVImklxxYuenh76+vpqbnPjxo2DTms1x1Jbrlhm7d/f0HJl2jdm3cyJllkTSdoJuAr4dEQ8Jb34mtCICEkxnPVFxFxgLsDUqVOjt7e35nx9fX0MNq3VHEttuWKZMfvahpabd8SOpdk3Zt3MTYdmTSJpDEWStSAivpuKHxloEkx/16XyNcDEisX3SmVmZtZFhky0fDeV2dBUXLq6ELgnIs6tmLQImJ6GpwMLK8pPSvXlEGBDRROjmZl1iXquaPluKrOhvRk4EXi7pNvT5yhgDvBOSfcB70jjANcBDwArgG8An2hDzGZmltmQfbTSWfbaNPy0pMq7qXrTbPOBPuAzVNxNBSyVNFbSBJ+tWzeLiBsBDTL5sBrzB3BK1qDMzKzthtUZvh13U/Xs0NhdNTnupinbXTplisexmJmZbanuRKtdd1Odv2Ah5ywb/s2RK0+ovb6RKNMdTFCueByLmZnZluq669B3U5mZmZkNXz13HfpuKjMzM7MG1HNFy3dTmZnZiPhRQTZa1XPXoe+mMjOzkRp4VNBtknYGbpW0GJhB8aigOZJmUzwq6DNs/qiggykeFXRwWyI3GwE/Gd7MzLLzi9dttPK7Ds3MrKX8qKByPYKmTPF0YyxOtMzMrGX8qKDyPYKmTPF0YyxuOjQzs5bwo4JsNHKiZWZm2flRQTZauenQzMxaYeBRQcsk3Z7KTqd4NNAVkk4GHgKOTdOuA46ieFTQs8CHWhuuWXM40TIzs+z8qCAbrdx0aGZmZpaJEy2zJpB0kaR1ku6qKDtT0pqqNyoMTDstPfH6XkmHtydqMzPLzYmWWXPMA46oUX5eRExJn+sAJO0LHAfsl5b5qqRtWhapmZm1jBMtsyaIiBuAJ+qcfRpwWUQ8FxEPUnT2PShbcGZm1jbuDG+W16mSTgJuoXjP23qKp1svrZhn4InXW6j3qdfd+DTlZhgNsTTytHMo174x62ZOtMzy+RpwFhDp7znAh4ezgnqfet2NT1NuhtEQy4zZ1za03LwjdizNvjHrZkM2HbqTr1ljIuKRiNgUEc8D3+DF5kE/8drMbJSop4/WPNzJ12zYBl4rkrwXGDhZWQQcJ2k7SfsAk4GbWx2fmZnlN2TTYUTckN60Xo8XOvkCD0oa6OT7Xw1HaNYBJF0K9ALjJa0GzgB6JU2haDpcCXwUICKWS7oCuBvoB06JiE3tiNvMzPIaSR+tlnTy7dmhsc6eOTp5lq3zaJniGe2xRMTxNYov3Mr8ZwNn54vIzMzKoNFEq2WdfM9fsJBzlg0/zJUn1F7fSJSpYy2UKx7HYmZmtqWGnqPlTr5mZmZmQ2so0XInXzMzM7OhDdkm506+ZmZmZo2p565Dd/I1MzMza4DfdWhmZmaWiRMtMzMzs0ycaJmZmZll4kTLzMzMLBMnWmZmZmaZONEyMzMzy8SJlpmZmVkmTrTMzMzMMmn0pdJm2U2afW1Dy807YscmR2JmZtYYX9EyMzMzy8SJllkTSLpI0jpJd1WUjZO0WNJ96e+uqVySvixphaQ7JR3QvsjNzCwnJ1pmzTEPOKKqbDZwfURMBq5P4wBHApPTZybwtRbFaGZmLeZEy6wJIuIG4Imq4mnA/DQ8HzimovziKCwFxkqa0JpIzcyslYbsDC/pIuBdwLqIeF0qGwdcDkwCVgLHRsR6SQK+BBwFPAvMiIjb8oRuVno9EbE2DT8M9KThPYFVFfOtTmVrqSJpJsVVL3p6eujr66u5oY0bNw46rdUcS225Ypm1f39Dy5Vp35h1s3ruOpwHXABcXFE20CQyR9LsNP4ZNm8SOZiiSeTgZgZs1okiIiRFA8vNBeYCTJ06NXp7e2vO19fXx2DTWs2x1JYrlhkjuDu3LPvGrJsN2XToJhGzhj0y8PtPf9el8jXAxIr59kplZmbWZRp9jlbLmkR6dmjs0niOS+Jlu9RepnhyxNIFTSKLgOnAnPR3YUX5qZIuo7jiu6GiPpmZWRcZ8QNLczeJnL9gIecsG36YK0+ovb6RKFMzBJQrnhyxdFKTiKRLgV5gvKTVwBkUCdYVkk4GHgKOTbNfR9GPcQVFX8YPtTRYszZwf18brRpNtB6RNCEi1rpJxAwi4vhBJh1WY94ATskbkVnpzMP9fW0UajTRcpOImZXesjUbGroyunLO0RmiGd0i4gZJk6qKp1FcCYaiv28fRaL1Qn9fYKmksQMn962J1qx56nm8g5tEzMwsB/f3LYEyxdONsQyZaLlJxMzMcnN/3/YpUzzdGIufDG9mZu3iR6BY1xvxXYdmZmYNcn9fy27SCO5gbwYnWmZmlp37+9po5UTLzMyyc39fG63cR8vMzMwsEydaZmZmZpk40TIzMzPLxImWmZmZWSZOtMzMzMwycaJlZmZmlokTLTMzM7NMnGiZmZmZZeIHlpplJmkl8DSwCeiPiKmSxgGXA5OAlcCxEbG+XTGamVkeI0q0fAAxq9vbIuKxivHZwPURMUfS7DT+mUZXvmzNBmY08D6vlXOObnSTZmZWh2Y0Hb4tIqZExNQ0PnAAmQxcn8bNbHPTgPlpeD5wTBtjMTOzTHI0HU6jeHEoFAeQPkZwpm7WBQL4saQA/j0i5gI9EbE2TX8Y6Km1oKSZwEyAnp4e+vr6am6gZweYtX//sAMbbH0jsXHjxizrbcRo2C+NfD8o17+TWTcbaaLlA0gblSmeHLF00QHk0IhYI+mPgcWSflU5MSIi1aEtpDo1F2Dq1KnR29tbcwPnL1jIOcuGX51XnlB7fSPR19fHYHG22mjYL400GQPMO2LH0vw7mXWzkSZaPoC0UZniyRFLtxxAImJN+rtO0tXAQcAjkiZExFpJE4B1bQ3SzMyyGFEfrcoDCLDZAQTABxAb7STtKGnngWHgL4C7gEXA9DTbdGBheyI0M7OcGk60fAAxq0sPcKOkO4CbgWsj4ofAHOCdku4D3pHGzcysy4yk6bAHuFrSwHouiYgfSvoFcIWkk4GHgGNHHqZZZ4qIB4DX1yh/HDis9RGZmVkrNZxo+QBiZmZmtnV+BY+ZmZlZJk60zMzMzDJxomVmZmaWiRMtMzMzs0ycaJmZmZll4kTLzMzMLBMnWmZmZmaZONEyMzMzy8SJlpmZmVkmTrTMzMzMMnGiZWZmZpaJEy0zMzOzTJxomZmZmWWSLdGSdISkeyWtkDQ713bMOpXriNnQXE+s02VJtCRtA3wFOBLYFzhe0r45tmXWiVxHzIbmemLdINcVrYOAFRHxQET8HrgMmJZpW2adyHXEbGiuJ9bxts203j2BVRXjq4GDK2eQNBOYmUY3Srp3kHWNBx4bbgD64nCXqEtDsWRUpnhKE8vbvrjVWPZuZSxbMWQdAdeTJvB+GUS31BPXkaYoUzyliaVZdSRXojWkiJgLzB1qPkm3RMTUFoQ0pDLFAuWKx7Hk4XoyMo5lcGWLp1GuIyNXpni6MZZcTYdrgIkV43ulMjMruI6YDc31xDperkTrF8BkSftIeilwHLAo07bMOpHriNnQXE+s42VpOoyIfkmnAj8CtgEuiojlDa5uyEvCLVSmWKBc8TiWYWhyHYFyfWfHUluZYoHyxbMFH0tapkzxdF0siohmrMfMzMzMqvjJ8GZmZmaZONEyMzMzy6StidZQr1aQtJ2ky9P0myRNqph2Wiq/V9LhLYjlbyXdLelOSddL2rti2iZJt6fPiDtq1hHLDEmPVmzzryumTZd0X/pMb0Es51XE8WtJT1ZMa/Z+uUjSOkl3DTJdkr6cYr1T0gEV05q6X9phJN+/DbH0StpQ8e//uYyxTJS0JNXP5ZI+VWOeluybOmNp5b7ZXtLNku5I8Xy+xjyD/j/bKXwsaTgWH0tqT2/usSQi2vKh6Nh4P/BK4KXAHcC+VfN8Avh6Gj4OuDwN75vm3w7YJ61nm8yxvA14WRr++EAsaXxji/fLDOCCGsuOAx5If3dNw7vmjKVq/r+h6Kza9P2S1vdW4ADgrkGmHwX8ABBwCHBTjv3Srk+j379NsfQC17Rov0wADkjDOwO/rlFnWrJv6oyllftGwE5peAxwE3BI1Tw1/5/tlE+d/2f6WOJjSeX6W3osaecVrXperTANmJ+GrwQOk6RUfllEPBcRDwIr0vqyxRIRSyLi2TS6lOJ5LjmM5JUThwOLI+KJiFgPLAaOaGEsxwOXjmB7WxURNwBPbGWWacDFUVgKjJU0gebvl7YYwfdvRywtExFrI+K2NPw0cA/FE8UrtWTf1BlLy6TvuzGNjkmf6jugBvt/tlP4WNJgLFvhY0kTjyXtTLRqvVqh+j+kF+aJiH5gA7Bbncs2O5ZKJ1NkuwO2l3SLpKWSjhlBHMOJ5X3pkuaVkgYe6Ne2/ZIuf+8D/LSiuJn7pR6Dxdvs/VJWZfueb0pNVj+QtF8rNpiahN5AceWmUsv3zVZigRbuG0nbSLodWEdxkBh031T9P9spfCwZWSw+lmypqceStr2Cp1NJ+itgKvDnFcV7R8QaSa8EfippWUTcnzGM7wOXRsRzkj5Kcab29ozbq8dxwJURsamirNX7xcrjNop//42SjgK+B0zOuUFJOwFXAZ+OiKdybmuEsbR036Q6OUXSWOBqSa+LiJp9U6x1fCwZVNcdS9p5RaueVyu8MI+kbYFdgMfrXLbZsSDpHcBngfdExHMD5RGxJv19AOijOIvNFktEPF6x/W8CBw7nezQzlgrHUXWpt8n7pR6DxTtaXuNRmu8ZEU8NNFlFxHXAGEnjc21P0hiKxGZBRHy3xiwt2zdDxdLqfVOx3SeBJWzZ1DHY/7OdwseSBmPxsWRQzT2WDNWJK9eH4mraAxSXCAc6x+1XNc8pbN6B8Yo0vB+bd2B8gJF1YKwnljdQdOabXFW+K7BdGh4P3MdWOvk1KZYJFcPvBZbGix31Hkwx7ZqGx+WMJc33WmAl6QG4OfZLxXonMXgHxqPZvAPjzTn2Szs/jXz/NsXy8oHfA0X/jP+u/H00OQ4BFwP/tpV5WrJv6oyllftmd2BsGt4B+E/gXVXz1Px/tlM+df6f6WOJjyXV29ra/19NPZa0u4IcRXFXzv3AZ1PZP1Jk+QDbA9+h6KB4M/DKimU/m5a7FziyBbH8BHgEuD19FqXyPwOWpR/OMuDkFsTyz8DytM0lwGsrlv1w2l8rgA/ljiWNnwnMqVoux365FFgL/IGibfxk4GPAx9J0AV9JsS4DpubaL+34jOT7tyGWUyt+o0uBP8sYy6EUHbzvrKifR7Vj39QZSyv3zZ8Cv0zx3AV8LpXX9f9sp3yG+n9qa98RH0t8LMl8LPEreMzMzMwy8ZPhzczMzDJxomVmZmaWiRMtMzMzs0ycaJmZmZll4kTLzMzMLBMnWmZmZmaZONEyMzMzy8SJlpmZmVkmTrTMzMzMMnGiZWZmZpaJEy0zMzOzTJxomZmZmWXiRMvMzMwsEydaZmZmXUTSPElfaOL6zpT07Sasp1fS6mbE1EmcaJWUpD5J6yVt1+5YzMpE0kpJv5W0seKzR7vjMhupQX7bF7Q7LhsZJ1olJGkS8BYggPe0NRizcnp3ROxU8flNPQup4P/3rMyqf9untjMYSdu2c/vdwP/hlNNJwFJgHjB9oFDSbpK+L+kpSb+Q9AVJN1ZMf62kxZKekHSvpGNbH7pZa0naVdI1kh5NV4GvkbRXxfQ+SWdL+jnwLPBK1xXrJJJmSPq5pPMkPSnpAUl/lspXSVonaXrVYuPTb/xpST+TtHfF+r6UlntK0q2S3lIx7UxJV0r6tqSngBlVsYyRdKmkqyS9VNIeafhRSQ9K+mTFvDukZsz1ku4G3phnD5WbE61yOglYkD6HS+pJ5V8BngFeTpGAVSZhOwKLgUuAPwaOA74qad8Wxm3WDi8B/gPYG3gF8FugurnlRGAmsDPwKK4r1nkOBu4EdqP47V5Gkbi8Cvgr4AJJO1XMfwJwFjAeuJ3ieDLgF8AUYFxa13ckbV8xfRpwJTC2cjlJOwDfA54DjgX6ge8DdwB7AocBn5Z0eFrkDOB/pM/hVByzRhMnWiUj6VCKA8YVEXErcD/wQUnbAO8DzoiIZyPibmB+xaLvAlZGxH9ERH9E/BK4CvhAi7+CWSt8L53ZPwlcGBFXpXrxNHA28OdV88+LiOUR0Q8cgeuKldcLv+30+UgqfzD9ZjcBlwMTgX+MiOci4sfA7ymSrgHXRsQNEfEc8FngTZImAkTEtyPi8fT7PwfYDnhNxbL/FRHfi4jnI+K3qeyPgB9SHJM+lOJ4I7B7RPxjRPw+Ih4AvkFx8gJFMnZ2RDwREauALzd1T3UIt72Wz3TgxxHxWBq/JJVdSvHvtapi3srhvYGD04FnwLbAtzLGatYux0TETwAkvUzSv1MkULum6TtL2iYdDMB1xTrHC7/tAZJmAI9UFP0WICKqyyqvaL3wm4+IjZKeAPYAVkn6O+DkNB4USdT4WstWOAQYAxwfEZHK9gb2qKpL2wD/mYb3qFrXQzXW2/WcaJVIuix7LLCNpIdT8XYUl297KC7T7gX8Ok2bWLH4KuBnEfHOFoVrVhazKM7GD46IhyVNAX4JqGKeqBh2XbHR4IXjQ2pSHAf8JvXH+nuKZr7lEfG8pPUMXl8G/Jii6fJ6Sb0pyVtFcaVt8iAxrE1xLE/jrxjJF+pUbjosl2OATcC+FO3nU4A/oTg7OAn4LnBmOoN/bSobcA3wakknpvNLW/8AACAASURBVM6KYyS9UdKftPYrmLXczhRn809KGkfRL2RrXFdsNDhK0qGSXkrRV2tpar7bmeKk/VFgW0mfo7iiNaSI+BeKVpbrJY0HbgaelvSZ1PF9G0mvkzTQ6f0K4LR0w8pewN809yt2Bida5TId+I+I+O+IeHjgQ9Gx9wTgVGAX4GGKZo5LKTolkvqm/AVF2/hv0jxfpLgiZtbN/g3YAXiM4m7dH25tZtcVK7nva/PnaF3d4HouoTjpeAI4kKLDPMCPKOrIryma8n5H7abCmiLiLIoO8T+hOB69i+KiwIMUdfCbqRzg82kbD1JcERuVzfN6sanVOo2kLwIvj4hReSeHmZlZ2fmKVgdJz/75UxUOoujM2OjZjpmZmWXmzvCdZWeK5sI9KO5AOQdY2NaIzMzMbFBuOjQzMzPLxE2HZmZmZpk40TIzMzPLpBR9tMaPHx+TJk2qOe2ZZ55hxx13bG1ATeLY22Nrsd96662PRcTuLQ6pKVxPyqdbY+/UetIpdaRMsUC54umUWIZVRyKi7Z8DDzwwBrNkyZJBp5WdY2+PrcUO3BIl+M038nE9KZ9ujb1T60mn1JEyxRJRrng6JZbh1BE3HZqZmZll4kTLzMzMLBMnWmZmZmaZONEyMzMzy8SJllkTSJooaYmkuyUtl/SpVD5O0mJJ96W/u6ZySfqypBWS7pR0QHu/gZmZ5VCKxzt0i0mzr91sfNb+/cyoKqtl5Zyjc4VkrdMPzIqI2yTtDNwqaTEwA7g+IuZImg3MBj4DHAlMTp+Dga+lvw1ZtmZDXb+1av7t2WjhOmLt4itaZk0QEWsj4rY0/DRwD7AnMA2Yn2abDxyThqcBF6c7hZcCYyVNaHHYZmaWma9omTWZpEnAG4CbgJ6IWJsmPQz0pOE9gVUVi61OZWsrypA0E5gJ0NPTQ19fX81t9uxQXEEdrsHW10obN24sRRyNcOxmNhQnWmZNJGkn4Crg0xHxlKQXpkVESBrWW9wjYi4wF2Dq1KnR29tbc77zFyzknGXDr84rT6i9vlbq6+tjsO9Vdo7dzIbipkOzJpE0hiLJWhAR303Fjww0Caa/61L5GmBixeJ7pTIzM+siQyZakraXdLOkO9LdVJ9P5ftIuindNXW5pJem8u3S+Io0fVLer2DWfiouXV0I3BMR51ZMWgRMT8PTgYUV5Seluw8PATZUNDGamVmXqOeK1nPA2yPi9cAU4Ih0YPgicF5EvApYD5yc5j8ZWJ/Kz0vzmXW7NwMnAm+XdHv6HAXMAd4p6T7gHWkc4DrgAWAF8A3gE22I2czMMhuyU0d6eeLGNDomfQJ4O/DBVD4fOJPiFvVpaRjgSuACSUrrMetKEXEjoEEmH1Zj/gBOyRqUmZm1XV29ZyVtA9wKvAr4CnA/8GREDNzmNHDHFFTcTRUR/ZI2ALsBj1Wts667qTrpzpjqu77qvROsjN+vk/Z7tU6O3czMuktdiVZEbAKmSBoLXA28dqQbrvduqk66M6b6YXiz9u+v606wMtz5Va2T9nu1To7dzMy6y7DuOoyIJ4ElwJsoHrA4kEVU3jH1wt1UafouwONNidbMzMysg9Rz1+Hu6UoWknYA3knx1OslwPvTbNV3Uw3cZfV+4Kfun2VmNrr5DnYbreq5ojUBWCLpTuAXwOKIuIbifW1/K2kFRR+sC9P8FwK7pfK/pXi3m5mZjW6+g91GpXruOryT4nUi1eUPAAfVKP8d8IGmRGdmZl3Bd7DbaOVX8JiZWUu08w72Mr0PtGx3Rpcpnm6MxYmWmZm1RDvvYC/T+0DLdmd0meLpxlj8rkMzM2sp38Fuo4kTLTMzy853sNto5aZDMzNrhQnA/NRP6yXAFRFxjaS7gcskfQH4JZvfwf6tdAf7E8Bx7QjabKScaJmZWXa+g91GKzcdmpmZmWXiRMvMzMwsEydaZmZmZpk40TIzMzPLxJ3hzaxlJs2+douyWfv3M6NGeaWVc47OFZKZWVa+omVmZmaWiRMtMzMzs0yGTLQkTZS0RNLdkpZL+lQqP1PSGkm3p89RFcucJmmFpHslHZ7zC5iZmZmVVT19tPqBWRFxm6SdgVslLU7TzouIf62cWdK+FE/w3Q/YA/iJpFenl4mamZmZjRpDXtGKiLURcVsafpri3VR7bmWRacBlEfFcRDwIrKDGU3/NzMzMut2w7jqUNIniFQo3AW8GTpV0EnALxVWv9RRJ2NKKxVZTIzGTNBOYCdDT00NfX1/NbW7cuHHQaWUza//+zcZ7dtiyrJYyfr9O2u/VOjl2MzPrLnUnWpJ2Aq4CPh0RT0n6GnAWEOnvOcCH611fRMwF5gJMnTo1ent7a87X19fHYNPKpvoW9Vn793POsqF38coTejNF1LhO2u/VOjl2MzPrLnXddShpDEWStSAivgsQEY9ExKaIeB74Bi82D64BJlYsvlcqMzMzMxtV6rnrUMCFwD0RcW5F+YSK2d4L3JWGFwHHSdpO0j7AZODm5oVsZmadxnew22hVT9Phm4ETgWWSbk9lpwPHS5pC0XS4EvgoQEQsl3QFcDfFHYun+I5D63aSLgLeBayLiNelsjOBjwCPptlOj4jr0rTTgJOBTcAnI+JHLQ/arLV8B7uNSkMmWhFxI6Aak67byjJnA2ePIC6zTjMPuAC4uKrcBxAzijvYgbVp+GlJdd/BDjwoaeAO9v/KHqxZE/ldh2ZNEBE3pLty6+EDiI1q7biDvd67wKvluIO5bHdGlymebozFiZZZXg0fQKAzDyJbUyvGemIvy3+81cp0UBiudsXerjvYz1+wsK67wKvluCu8bHdGlymebozFiZZZPiM6gEBnHkS2pvoRKFDfY1DK+AgUKNdBYbjaEftgd7BXTP8GcE0a9R3s1hX8UmmzTPwIFLMX+Q52G618RcssE0kTUgdg2PIAcomkcyk6w/sAYqOB72C3UcmJllkTSLoU6AXGS1oNnAH0+gBiVvAd7DZaOdEya4KIOL5G8YVbmd8HEDOzUcB9tMzMzMwycaJlZmZmlokTLTMzM7NMnGiZmZmZZeJEy8zMzCwTJ1pmZmZmmTjRMjMzM8tkyERL0kRJSyTdLWm5pE+l8nGSFku6L/3dNZVL0pclrZB0p6QDcn8JMzMzszKq54pWPzArIvYFDgFOkbQvMBu4PiImA9encYAjKV4pMhmYSfFiXTMzM7NRZ8hEKyLWRsRtafhp4B5gT2AaMD/NNh84Jg1PAy6OwlJgbNVLQ83MzMxGhWG9gkfSJOANwE1AT8ULcx8GetLwnsCqisVWp7K1FWVImklxxYuenh76+vpqbnPjxo2DTiubWfv3bzbes8OWZbWU8ft10n6v1smxm5lZd6k70ZK0E3AV8OmIeEp68d2gERGSYjgbjoi5wFyAqVOnRm9vb835+vr6GGxa2cyYfe1m47P27+ecZUPv4pUn9GaKqHGdtN+rdXLsZt1K0kTgYoqT8gDmRsSXJI0DLgcmUbx8/diIWK/iIPMl4CjgWWDGQOuKWSep665DSWMokqwFEfHdVPzIQJNg+rsula8BJlYsvlcqMzOz0cv9fW1UqueuQwEXAvdExLkVkxYB09PwdGBhRflJ6e7DQ4ANFU2MZmY2Crm/r41W9TQdvhk4EVgm6fZUdjowB7hC0snAQ8Cxadp1FJd6V1Bc7v1QUyM2M7OO1o7+vvX2ma2Wo79n2fqRlimeboxlyEQrIm4ENMjkw2rMH8ApI4zLzMy6ULv6+56/YGFdfWar5ehDW7Z+pGWKpxtj8ZPhzcysJdzf10YjJ1pmZpad+/vaaDX866hmZmbD5/6+Nio50TIzs+zc39dGKzcdmpmZmWXiRMvMzMwsEydaZmZmZpk40TIzMzPLxImWmZmZWSZOtMzMzMwycaJlZmZmlokTLbMmkHSRpHWS7qooGydpsaT70t9dU7kkfVnSCkl3SjqgfZGbmVlOTrTMmmMecERV2Wzg+oiYDFyfxgGOBCanz0zgay2K0czMWsyJllkTRMQNwBNVxdOA+Wl4PnBMRfnFUVgKjB14qa6ZmXWXIV/BI+ki4F3Auoh4XSo7E/gI8Gia7fSIuC5NOw04GdgEfDIifpQhbrNO0FPxEtyHgZ40vCewqmK+1alsixfmSppJcdWLnp4e+vr6am9oB5i1f/+wAxxsfbnUirGe2FsdZ702btxY2tiG0smxm3WSet51OA+4ALi4qvy8iPjXygJJ+wLHAfsBewA/kfTqiNjUhFjNOlZEhKRoYLm5wFyAqVOnRm9vb835zl+wkHOWDf/VpStPqL2+XGbMvnaLsln79w8Ze6vjrFdfXx+D/ZuUXSfHbtZJhmw6HKRJZDDTgMsi4rmIeJDiresHjSA+s072yECTYPq7LpWvASZWzLdXKjMzsy4z/FPgF50q6STgFmBWRKynaP5YWjHPQJPIFuptEumky9vVzR/1NueU8ft10n6vVqLYFwHTgTnp78KK8lMlXQYcDGyoaGI060ruhmKjVaOJ1teAs4BIf88BPjycFdTbJNJJl7erm0XqaRKBcjaLdNJ+r9aO2CVdCvQC4yWtBs6gSLCukHQy8BBwbJr9OuAoiiu+zwIfammwZu0xD3dDsVGooUQrIh4ZGJb0DeCaNOomERuVIuL4QSYdVmPeAE7JG5FZuUTEDZIm1Tn7C91QgAclDXRD+a9M4Zll01CiJWlCRVPHe4GBhzQuAi6RdC7FWchk4OYRR2lmZt2qJd1QynRnbom6NwDliqcbY6nn8Q61mkR6JU2haDpcCXwUICKWS7oCuBvoB07xpV4zMxtEy7qhlOnO3LJ1zShTPN0Yy5C/ukGaRC7cyvxnA2ePJCgzM+t+7oZio4GfDG9mZm1R9UaE6m4ox0naTtI+uBuKdbCRPN7BzMysLu6GYqOVEy0zM8vO3VBstHLToZmZmVkmTrTMzMzMMnGiZWZmZpaJEy0zMzOzTJxomZmZmWXiRMvMzMwsEydaZmZmZpk40TIzMzPLxA8sHYUmzb52yHlm7d/PjKr5Vs45OldIZmZmXclXtMzMzMwyGTLRknSRpHWS7qooGydpsaT70t9dU7kkfVnSCkl3SjogZ/BmZmZmZVbPFa15wBFVZbOB6yNiMnB9Ggc4kuIt65OBmcDXmhOmmZmZWecZMtGKiBuAJ6qKpwHz0/B84JiK8oujsBQYK2lCs4I1M7PO5NYRG60a7QzfExFr0/DDQE8a3hNYVTHf6lS2liqSZlJc9aKnp4e+vr6aG9q4ceOg08pm1v79m4337LBlWS2t/n71xFQr9k75d+ik34zZKDIPuAC4uKJsoHVkjqTZafwzbN46cjBF68jBLY3WrElGfNdhRISkaGC5ucBcgKlTp0Zvb2/N+fr6+hhsWtlU36U3a/9+zlk29C5eeUJvpohqq46zllqxtzrORnXSb8ZstIiIGyRNqiqeBvSm4flAH0Wi9ULrCLBU0lhJEypO8M06RqOJ1iMDP/rUNLgula8BJlbMt1cqMzMzq9ay1pF6Wxiq5bg6Xrar7mWKpxtjaTTRWgRMB+akvwsryk+VdBnFZd4NPgMxs05Tz7PmYMvnzflZc43L3Tpy/oKFdbUwVMtxJb9sV93LFE83xjLkr07SpRSXdsdLWg2cQZFgXSHpZOAh4Ng0+3XAUcAK4FngQyOO0MzMupVbR6zrDZloRcTxg0w6rMa8AZwy0qDMzGxUcOuIdT2/gsfMzLJz64iNVk60zDKTtBJ4GtgE9EfEVEnjgMuBScBK4NiIWN+uGM1yc+uIjVZ+16FZa7wtIqZExNQ0PtjbFczMrIs40TJrj8HermBmZl3ETYdm+QXw43Tr+r+n29EHe37QZjrxGUFbUyvGemIvQ5y1VMdeluf/1KNMzysy62ZOtMzyOzQi1kj6Y2CxpF9VTtza84M68RlBW1PrrQT1vEGhDHHWUh17p7w9Acr1vCKzbuamQ7PMImJN+rsOuBo4iPT8IICq5weZmVkXcaJllpGkHSXtPDAM/AVwFy8+Pwg2f36QmZl1ETcdmuXVA1wtCYr6dklE/FDSL6j9/CAzM+siTrTMMoqIB4DX1yh/nBrPDzIzs+7ipkMzMzOzTJxomZmZmWXiRMvMzMwsEydaZmZmZpmMqDO8X5ZrZmbW2Zat2VD3Q3orrZxzdIZouk8zrmj5ZblmZtYwSSslLZN0u6RbUtk4SYsl3Zf+7truOM0akePxDtOA3jQ8H+gDPpNhO2Zm1j3eFhGPVYwPnLTPkTQ7jftYYsM2qYGrdQDzjtixKdsfaaKV/WW5nfTi0+oX0db7ot8yvjC3Vuyd8u/QSb8ZMxuUT9qtK4w00cr+stxOevFpdRt3PS/LhXK+MLdW7J3ywtxO+s2YGdCCk/Z6T3yr5ThpK9vJYLfvm0a+WzNjGVGiVfmyXEmbvSw3Itb6ZblmZlaH7Cft5y9YWNeJb7UcJ5hlOxns9n3TSEd/KJoOmxFLw53h/bJcMzNrhsqTdmCzk3YAn7RbJxvJXYc9wI2S7gBuBq6NiB8Cc4B3SroPeEcaNzMz24JP2q3bNdx06JflmplZE/QAV0uC4ph0SUT8UNIvgCsknQw8BBzbxhjNGpbj8Q5mZmZ18Um7dTu/gsfMzMwsEydaZmZmZpk40TIzMzPLxImWmZmZWSZOtMzMzMwycaJlZmZmlokf72Bm1sEmjeD1ImaWn69omZmZmWXiRMvMzMwsk9I3HS5bs6GhN2+vnHN0hmjMzMzM6ucrWmZmZmaZONEyMzMzyyRboiXpCEn3SlohaXau7Zh1KtcRs6G5nliny5JoSdoG+ApwJLAvcLykfXNsy6wTuY6YDc31xLpBritaBwErIuKBiPg9cBkwLdO2zDqR64jZ0FxPrOPluutwT2BVxfhq4OBM27Iu1eUPYnQdMRua64l1PEVE81cqvR84IiL+Oo2fCBwcEadWzDMTmJlGXwPcO8jqxgOPNT3I1nDs7bG12PeOiN1bGUwt9dSRVO56Um7dGnvH1JMOrSNligXKFU+nxFJ3Hcl1RWsNMLFifK9U9oKImAvMHWpFkm6JiKnNDa81HHt7dEjsQ9YRcD0pO8eeXVceS8oUC5Qrnm6MJVcfrV8AkyXtI+mlwHHAokzbMutEriNmQ3M9sY6X5YpWRPRLOhX4EbANcFFELM+xLbNO5DpiNjTXE+sG2V7BExHXAdc1YVVDXhIuMcfeHh0RexPrCHTIdx6EY2+Pjoi9S48lZYoFyhVP18WSpTO8mZmZmfkVPGZmZmbZlDrR6tRXL0i6SNI6SXe1O5bhkjRR0hJJd0taLulT7Y6pXpK2l3SzpDtS7J9vd0y5dWodgc6tJ64j5TZUnZC0naTL0/SbJE1qYywzJD0q6fb0+euMsWy1vqnw5RTrnZIOaGMsvZI2VOyXz2WMZcj6POJ9ExGl/FB0fLwfeCXwUuAOYN92x1Vn7G8FDgDuancsDcQ+ATggDe8M/LqD9ruAndLwGOAm4JB2x5Xx+3ZsHUnxd2Q9cR0p76eeOgF8Avh6Gj4OuLyNscwALmjRvtlqfQOOAn6QfiOHADe1MZZe4JoW7Zch6/NI902Zr2h17KsXIuIG4Il2x9GIiFgbEbel4aeBeyiezlx6UdiYRsekTzd3QuzYOgKdW09cR0qtnjoxDZifhq8EDpOkNsXSMnXUt2nAxek3shQYK2lCm2JpmTrr84j2TZkTrVqvXuiI/8y6Rbqk/gaKs96OIGkbSbcD64DFEdExsTfAdaTNXEdKp5468cI8EdEPbAB2a1MsAO9LzVFXSppYY3qrlO3/kzelJu4fSNqvFRvcSn0e0b4pc6JlbSRpJ+Aq4NMR8VS746lXRGyKiCkUT5A+SNLr2h2TdSfXEWuC7wOTIuJPgcW8eKVttLuN4hU3rwfOB76Xe4M563OZE626XlFizSdpDMUPbkFEfLfd8TQiIp4ElgBHtDuWjFxH2sR1pLTqqRMvzCNpW2AX4PF2xBIRj0fEc2n0m8CBGeKoV2n+P4mIpwaauKN4jtoYSeNzba+O+jyifVPmRMuvXmiD1FfhQuCeiDi33fEMh6TdJY1NwzsA7wR+1d6osnIdaQPXkVKrp04sAqan4fcDP43U47nVsVT183kPRf+gdlkEnJTusDsE2BARa9sRiKSXD/Sbk3QQRa6SIxmutz6PaN9kezL8SEUHv3pB0qUUd02Ml7QaOCMiLmxvVHV7M3AisCz14wA4PZ1VlN0EYL6kbSgq5hURcU2bY8qmk+sIdHQ9cR0pqcHqhKR/BG6JiEUUB9VvSVpB0SH7uDbG8klJ7wH6UywzcsQCtesbxc0QRMTXKZ6+fxSwAngW+FAbY3k/8HFJ/cBvgeMyJcMwSH0GXlERz4j2jZ8Mb2ZmZpZJmZsOzczMzDqaEy0zMzOzTJxomZmZmWXiRMvMzMwsEydaZmZmZpk40TIzMzPLxImWmZmZWSZOtMzMzMwycaJlZmZmlokTLTMzM7NMnGiZmZmZZeJEy8zMzCwTJ1pmZmZmmTjRMjMzM8vEiVaHkLRcUu9WpvdJ+usWhmRWOq4HZs0jaYakG9sdR6dzolUSkjZWfJ6X9NuK8RMiYr+I6Evzninp220O2aypJK2U9I465pOkByTd3Yq4zFotnTCsl7RdE9c5SdKZNcoPl3SDpKclPSrpZ5Le06ztmhOt0oiInQY+wH8D764oW9Du+MxK5K3AHwOvlPTGdgdj1kySJgFvAQIYccIj6RBJnwW2TeNvTeNIej/wHeBiYC+gB/gc8O6Rbtde5ESrQwyc7Us6Ajgd+J/patcdg8z/YUn3pLOiH0nau7URmzVG0qvSWfUGSY9JurxqlunAQuC6NDzYel4i6R8kPSRpnaSLJe2Spk2SFJKmS/rvtJ3PVi07W9L9kh6XdIWkcTm+r1mVk4ClwDwqft+SdpP0fUlPSfqFpC9UNutJeq2kxZKekHSvpGMBImIpcBfwNeA44EjgS5IEnAucFRHfjIgNEfF8RPwsIj5SKzBJX5K0KsVwq6S3VEw7SNItadojks5N5dtL+naqR0+m2HuavM9KzYlWh4mIHwL/BFyerna9vnoeSdMokrG/BHYH/hO4tKWBmjXuLODHwK4UZ9nnD0yQ9DLg/cCC9DlO0ksHWc+M9Hkb8EpgJ+CCqnkOBV4DHAZ8TtKfpPK/AY4B/hzYA1gPfGVkX8usLifx4u/78Iqk5CvAM8DLKRKwyiRsR2AxcAnF1d7jgK9K2jfNEhXr35TGXwNMBK4cRmy/AKYA49K2viNp+zTtS8CXIuKPgP8BXJHKpwO7pG3tBnwM+O0wttnxnGh1p48B/xwR90REP0ViNsVXtaxD/AHYG9gjIn4XEZWdcf8SeI4iEbsWGAMcPch6TgDOjYgHImIjcBpFYrZtxTyfj4jfRsQdwB3AwInLx4DPRsTqiHgOOBN4f9WyZk0l6VCK3/4VEXErcD/wQUnbAO8DzoiIZyPibmB+xaLvAlZGxH9ERH9E/BK4CviApEOAPwU+DlxGkZB9iiLpAVhbb3wR8e2IeDxt4xxgO4qEDYp6+ypJ4yNiY7qSNlC+G/CqiNgUEbdGxFPD3DUdzYlWd9qb4tLwk5KeBJ4ABOzZ3rDM6vL3FL/Xm9Pdth+umDad4iDUHxG/oziYDNZ8uAfwUMX4QxT9VCqbLR6uGH6W4qoXFHXo6oo6dA/FlYBR1eRhLTcd+HFEPJbGL0llu1P8dldVzFs5vDdw8MDvNf1mTwBeHhFLI+ILQD9Aahr8J+DxtOyEeoOT9HepS8qGtI1dgPFp8snAq4FfpebBd6XybwE/Ai6T9BtJ/yJpTL3b7AY+O+tMMcT0VcDZ7kRvnSgiHgY+Ai+c4f9E0g3A74C3AwdJel+a/WXA9uks+rGqVf2G4gA04BUUB5tHKJokt2YV8OGI+PmIvoxZnSTtABwLbCNp4ARgO2AsRYLfT/G7/XWaNrFi8VXAzyLinYOtPyJWUlyZHXBvWu59wL/WEd9bKE6CDgOWR8TzktZTnBQREfcBx0t6CcWV5ysl7RYRzwCfBz6fOvpfl7Z94VDb7Ba+otWZHgEmpR90LV8HTpO0H4CkXSR9oGXRmY2ApA9IGkiE1lOcWDwPnEhxkHkNRT+RKRRn0KuB42us6lLgf0naR9JOvNi3sb+OML4OnP3/27v/YMnK+s7j708QkaAJGNi7BNgMu5IYskTECeKSSk0gGsSUkFpjcA0/DKlJ7WJWN1RFtGpjEmMVVi0SNYnJRIxDloAswsIqSWSRu5aVBQNIHH7EOMExMBkY5fdoYnbgu3+c52oz3J77q0933zvvV1XXPec5p/v5dt8+3d8+z3OeZ665Pclhre+j1Jcz6c6aHst33t8/TNfH9hzgWuA3knx3kpe2sjmfBH4wydlJ9m+3Hxvoc/gcVVXArwL/NclbknxPuwjkx5NsmucuL6JL9r4GPC/JrwPfM7cxyS8kOayqngEeb8XPJPnJJMe15s8n6ZoSn1n6y7N6mWitTv+j/X0kyZ17bqyq64D30Z2qfZLuipPXjjE+aSV+DLgtyS7gBuBtVXU/XRPK71fVQ4M3uqRovubDj9I1W3wW+ArdGbFfWWQMH2h1fzrJU3RXgb1yJU9KWsC5wB9X1d/v8f7+XbpmwLfSNdU9RPe+vpKuvyJV9RTwGrpO8P/Q9nkf3RmxoarqGuDngV9s93sY+G26q3r39BfAn9P92Pkq3fE02Hx5GnBPO24/AJxVVf9I13n/Grok6z7g/7T49xnpklpJkrRaJHkfXR+soUOcaDp4RkuSpCnXxsn60XROpOt8ft2k49LC7AwvSdL0exFdc+H30zXxXcL8TXyaMjYdSpIk9cSmQ0mSpJ5MRdPhoYceWuvWrZt32ze+8Q0OOuig8QY0xDTFAtMVz2qJ5Y477vh6VR025pBGwuNk6YxluLV4nEzzMTLJ+q179JZ0jFTVxG+veMUraphbbrll6LZxm6ZYqqYrntUSC3B7TcF7rg54LAAAGDpJREFUfjk3j5OlM5bh1uJxMs3HyCTrt+7RW8oxYtOhJElST0y0JEm9S3JUkluS3NvmsHxbK/+NJNuT3NVupw/c551Jtib5UpKfnlz00vJNRR8tSdKatxu4sKruTPIi4I4kN7Vtl1bVs+bbS3Is3UjnP0I3pMH/TvKDVfX0WKOWVsgzWpKk3lXVjqq6sy0/RTcdyxF7ucsZwFVV9a2q+gqwFTix/0il0fKMliRprJKsA14O3AacDLw1yTnA7XRnvR6jS8JuHbjbg8yTmCXZCGwEmJmZYXZ2dt46d+3aNXTbOEyyfuuerKlPtLZsf4LzLvrUku+37eLX9RCNpNXEz4/pk+SFwCeAt1fVk0k+DLwHqPb3ErpJjhelqjYBmwDWr19fGzZsmHe/2dlZhm0bh6XUv24Z71kY/r6d5HPfV+seZNOhJGkskuxPl2RdUVXXAlTVw1X1dFU9A/wR32ke3A4cNXD3I1uZtKqYaEmSepckwGXAfVX1/oHywwd2+1ng7rZ8A3BWkgOSHA0cA3x+XPFKozL1TYeSpDXhZOBsYEuSu1rZu4A3JTmerulwG/DLAFV1T5KrgXvprli8wCsOtRqZaEmSeldVnwMyz6Yb93Kf9wLv7S0oaQxsOpQkSeqJiZYkSVJPTLQkSZJ6YqIlSZLUExMtSZKknphoSZIk9cRES5IkqScmWtKIJNkvyReSfLKtH53ktiRbk3w8yfNb+QFtfWvbvm6ScUuS+mOiJY3O24D7BtbfB1xaVS8BHgPOb+XnA4+18kvbfpKkNchESxqBJEcCrwM+0tYDnAJc03bZDJzZls9o67Ttp7b9JUlrjFPwSKPxO8CvAS9q698HPF5Vu9v6g8ARbfkI4AGAqtqd5Im2/9f3fNAkG4GNADMzM8zOzs5b+a5du4ZuG7dpimXmQLjwuN0L77iHPuKfptcFpi8eaa1aMNFK8gLgs8ABbf9rqurdbTb1q+i+IO4Azq6qf05yAHA58ArgEeDnq2pbT/FLE5fkZ4CdVXVHkg2jfOyq2gRsAli/fn1t2DD/w8/OzjJs27hNUywfuuJ6Ltmy9N+T2968YeSxTNPrAtMXj7RWLabp8FvAKVX1MuB44LQkJ2H/E2nOycDrk2yj+/FxCvAB4OAkc9/yRwLb2/J24CiAtv176X6USJLWmAUTrersaqv7t1th/xMJgKp6Z1UdWVXrgLOAz1TVm4FbgDe03c4Frm/LN7R12vbPVFWNMWRJ0pgs6px6kv3omgdfAvwe8HessP/JYvue2MdiuGmKx1jm9Q7gqiS/DXwBuKyVXwb8SZKtwKN0yZkkaQ1aVKJVVU8Dxyc5GLgOeOlKK15s3xP7WAw3TfEYS6eqZoHZtnw/cOI8+/wT8HNjDUySNBFLGt6hqh6naw55FfY/kSRJ2qsFE60kh7UzWSQ5EHg13aCM9j+RJEnai8W0yR0ObG79tL4LuLqqPpnkXux/IkmSNNSCiVZVfRF4+Tzl9j+RJEnaC6fgkST1LslRSW5Jcm+Se5K8rZW/OMlNSb7c/h7SypPkg23y9S8mOWGyz0BaHhMtSdI47AYurKpjgZOAC5IcC1wE3FxVxwA3t3WA1wLHtNtG4MPjD1laORMtSVLvqmpHVd3Zlp+iu6jqCJ49yPWeg19f3gbNvpXuSvfDxxy2tGJOKi1JGqsk6+j6/t4GzFTVjrbpIWCmLX978OtmbmDsHQNlq2bi9aXUv5xBumH4QN2TfO77at2DTLQkSWOT5IXAJ4C3V9WTgzO0VVUlWdJwQKtl4vWl1H/eRZ9aVh3DBuqe5HPfV+seZNOhJGkskuxPl2RdUVXXtuKH55oE29+drfzbg183gwNjS6uGiZYkqXfpTl1dBtxXVe8f2DQ4yPWeg1+f064+PAl4YqCJUVo1bDqUJI3DycDZwJYkd7WydwEXA1cnOR/4KvDGtu1G4HRgK/BN4C3jDVcaDRMtSVLvqupzQIZsPnWe/Qu4oNegpDGw6VCSJKknJlqSJEk9MdGSJEnqiYmWJElST0y0JEmSemKiJUmS1BMTLUmSpJ6YaEmSJPXEREuSJKknJlqSJEk9MdGSRiDJC5J8PslfJ7knyW+28qOT3JZka5KPJ3l+Kz+grW9t29dNMn5JUj9MtKTR+BZwSlW9DDgeOC3JScD7gEur6iXAY8D5bf/zgcda+aVtP0nSGmOiJY1AdXa11f3brYBTgGta+WbgzLZ8RlunbT81ybAJdyVJq9TzJh2AtFYk2Q+4A3gJ8HvA3wGPV9XutsuDwBFt+QjgAYCq2p3kCeD7gK/v8ZgbgY0AMzMzzM7Ozlv3rl27hm4bt2mKZeZAuPC43QvvuIc+4p+m1wWmLx5prTLRkkakqp4Gjk9yMHAd8NIRPOYmYBPA+vXra8OGDfPuNzs7y7Bt4zZNsXzoiuu5ZMvSP+a2vXnDyGOZptcFpi8eaa2y6VAasap6HLgFeBVwcJK5b/ojge1teTtwFEDb/r3AI2MOVZLUMxMtaQSSHNbOZJHkQODVwH10Cdcb2m7nAte35RvaOm37Z6qqxhexJGkcbDqURuNwYHPrp/VdwNVV9ckk9wJXJflt4AvAZW3/y4A/SbIVeBQ4axJBS5L6ZaIljUBVfRF4+Tzl9wMnzlP+T8DPjSE0SdIE2XQoSZLUExMtSVLvknw0yc4kdw+U/UaS7UnuarfTB7a9s82c8KUkPz2ZqKWVM9GSJI3Dx4DT5im/tKqOb7cbAZIcS9dv8UfafX6/9X+UVh0TLUlS76rqs3QXfizGGcBVVfWtqvoKsJV5+jpKq4Gd4SVJk/TWJOcAtwMXVtVjdDMn3Dqwz+CsCs+yWmZPWEr9y5nNAIbPaDDJ576v1j1owUQryVHA5cAM3dxtm6rqA0leDHwcWAdsA95YVY+1+do+AJwOfBM4r6ru7Cd8SdIq9mHgPXTfLe8BLgF+cSkPsFpmT1hK/edd9Kll1TFsRoNJPvd9te5Bi2k63E33K+NY4CTggtZ+fhFwc1UdA9zc1gFeCxzTbhvpDiRJkp6lqh6uqqer6hngj/hO8+C3Z05oBmdVkFaVBROtqtoxd0aqqp6iG+36CLo29M1tt83AmW35DODy6txKNwXJ4SOPXJK0qu3x3fCzwNwViTcAZyU5IMnRdD/cPz/u+KRRWFIfrSTr6AZlvA2YqaodbdNDdE2L0CVhDwzcba5tfcdA2aLb1WcOXF57dR/tstPS3jtnmuIxFkl7k+RKYANwaJIHgXcDG5IcT9d0uA34ZYCquifJ1cC9dK0qF7RJ26VVZ9GJVpIXAp8A3l5VT3ZdsTpVVUmWNE/bYtvVP3TF9VyyZel99oe1Va/EtLT3zpmmeIxF0t5U1ZvmKb5snrK5/d8LvLe/iKTxWNTwDkn2p0uyrqiqa1vxw3Onfdvfna3ctnVJkiQWkWi1qwgvA+6rqvcPbLoBOLctnwtcP1B+TjonAU8MNDFKkiTtMxbTJncycDawJcldrexdwMXA1UnOB74KvLFtu5FuaIetdMM7vGWkEUuSJK0SCyZaVfU5IEM2nzrP/gVcsMK4JEmSVj2n4JEkSeqJiZYkSVJPTLQkSZJ6YqIlSZLUExMtSZKknphoSZIk9cRES5IkqScmWpIkST0x0ZIkSeqJiZY0AkmOSnJLknuT3JPkba38xUluSvLl9veQVp4kH0yyNckXk5ww2WcgSeqDiZY0GruBC6vqWOAk4IIkxwIXATdX1THAzW0d4LXAMe22Efjw+EOWJPXNREsagaraUVV3tuWngPuAI4AzgM1tt83AmW35DODy6twKHJzk8DGHLUnq2YKTSktamiTrgJcDtwEzVbWjbXoImGnLRwAPDNztwVa2Y6CMJBvpzngxMzPD7OzsvHXu2rVr6LZxm6ZYZg6EC4/bveT79RH/NL0uMH3xSGuViZY0QkleCHwCeHtVPZnk29uqqpLUUh6vqjYBmwDWr19fGzZsmHe/2dlZhm0bt2mK5UNXXM8lW5b+MbftzRtGHss0vS4wffFIa5VNh9KIJNmfLsm6oqqubcUPzzUJtr87W/l24KiBux/ZyiRJa4iJljQC6U5dXQbcV1XvH9h0A3BuWz4XuH6g/Jx29eFJwBMDTYySpDXCREsajZOBs4FTktzVbqcDFwOvTvJl4KfaOsCNwP3AVuCPgP80gZilsUny0SQ7k9w9UObwJ1rz7KMljUBVfQ7IkM2nzrN/ARf0GpQ0XT4G/C5w+UDZ3PAnFye5qK2/g2cPf/JKuuFPXjnWaKUR8YyWJKl3VfVZ4NE9ih3+RGueZ7QkSZOyouFPYPUMgbKU+pczJAkMH5Zkks99X617kImWJGniljP8SbvfVA6Bsu6iTz1r/cLjnuaSz31jkfde3lfzsGFJJjmUx75a9yCbDiVJk+LwJ1rzTLQkSZPi8Cda82w6lCT1LsmVwAbg0CQPAu+mG+7k6iTnA18F3th2vxE4nW74k28Cbxl7wNKImGhJknpXVW8assnhT7Sm2XQoSZLUExMtSZKknphoSZIk9cRES5IkqScmWpIkST0x0ZIkSeqJiZYkSVJPFky0knw0yc4kdw+UvTjJTUm+3P4e0sqT5INJtib5YpIT+gxekiRpmi3mjNbHgNP2KLsIuLmqjgFubusArwWOabeNwIdHE6YkSdLqs2CiVVWfBR7do/gMYHNb3gycOVB+eXVuBQ6emzBUkiRpX7PcKXhmBib4fAiYactHAA8M7PdgK3vOZKBJNtKd9WJmZobZ2dn5KzoQLjxu95IDHPZ4K7Fr165eHne5pikeY5Ek6blWPNdhVVWSWsb9NgGbANavX18bNmyYd78PXXE9l2xZepjb3jz/463E7Owsw+KchGmKx1gkSXqu5V51+PBck2D7u7OVbweOGtjvyFYmSZK0z1luonUDcG5bPhe4fqD8nHb14UnAEwNNjJIkSfuUBdvkklwJbAAOTfIg8G7gYuDqJOcDXwXe2Ha/ETgd2Ap8E3hLDzFLkiStCgsmWlX1piGbTp1n3wIuWGlQkiRJa4Ejw0uSJPXEREsaAWdQkCTNx0RLGo2P4QwKkqQ9mGhJI+AMCpKk+ax4wNK1Zt1Fnxq67cLjdnPeXrZvu/h1fYSk1WtsMyhM02j40xSLM0sMN03xJNkGPAU8DeyuqvVJXgx8HFgHbAPeWFWPTSpGablMtKQx6HsGhWkaDX+aYnFmieGmLR7gJ6vq6wPrc03vFye5qK2/YzKhSctn06HUH2dQkJZvWNO7tKp4Rkvqz9wMChfz3BkU3prkKuCVOIOCVMCn21nfP2xncoc1vT/LtDav79lkvdxm7KWYludu3c9moiWNgDMoSCvy41W1Pcm/AG5K8jeDG/fW9D6tzet79ue98Ljdy2rGXophTd6TbCbeV+seZKIljYAzKEjLV1Xb29+dSa4DTqQ1vVfVjj2a3qVVxURLkjQxSQ4CvquqnmrLrwF+i+FN75oSe7tKf858V+vva1fom2hJkiZpBrguCXTfSX9aVX+e5K+Yv+ldWlVMtCRJE1NV9wMvm6f8EeZpepdWG4d3kCRJ6omJliRJUk9MtCRJknpioiVJktQTEy1JkqSemGhJkiT1xERLkiSpJ46jJUnSGjBspPb5RmcftK+N1D5untGSJEnqiYmWJElST0y0JEmSemKiJUmS1BMTLUmSpJ6YaEmSJPXEREuSJKknjqMlSVrztmx/Yq9jSQ3jGFNaKRMtSZKGGDYIqLRYJlqrmL/QJEmabvbRkiRJ6olntDS1lnvK/mOnHTTiSCRJWp7ezmglOS3Jl5JsTXJRX/VIq5XHiLQwjxOtdr0kWkn2A34PeC1wLPCmJMf2UZe0GnmMSAvzONFa0FfT4YnA1qq6HyDJVcAZwL091SetNh4j0sI8TrRiy+2GMqoLx1JVI3mgZz1o8gbgtKr6pbZ+NvDKqnrrwD4bgY1t9YeALw15uEOBr488yOWZplhguuJZLbH8QFUdNs5g5rOYY6SVe5ysjLEMtyaOk1V0jEyyfusevUUfIxPrDF9Vm4BNC+2X5PaqWj+GkBY0TbHAdMVjLP3wOFkZYxlu2uJZrtVyjEyyfuuerL46w28HjhpYP7KVSep4jEgL8zjRqtdXovVXwDFJjk7yfOAs4Iae6pJWI48RaWEeJ1r1emk6rKrdSd4K/AWwH/DRqrpnmQ+34CnhMZqmWGC64jGWJRjxMQLT9ZyNZX7TFAtMXzzPsca+SyZZv3VPUC+d4SVJkuQUPJIkSb0x0ZIkSerJ1CZaST6aZGeSu6cglqOS3JLk3iT3JHnbBGN5QZLPJ/nrFstvTiqWgZj2S/KFJJ+cgli2JdmS5K4kt086npVaaPqRJOcl+Vp7vncl+aWBbecm+XK7nTuGWC4diONvkzw+sO3pgW0r7sy80OdDOh9ssX4xyQkD20b9uiwUy5tbDFuS/GWSlw1sG/n7dRHxbEjyxMD/49cHtq3J6W4m9bym4btjkp/PSQ5Ock2Sv0lyX5JXjbHu/9Je87uTXJnkBeOq+zmqaipvwE8AJwB3T0EshwMntOUXAX8LHDuhWAK8sC3vD9wGnDTh1+dXgT8FPjkF/6ttwKGTjmNEz2U/4O+Afw08H/jrPd93wHnA785z3xcD97e/h7TlQ/qMZY/9f4Wu4/Lc+q4RvzZ7/XwATgf+rB0vJwG39fG6LDKWfzdXB91UMrf1+X5dRDwb5jtWl/o/Xi23ST6vafjumOTnM7AZ+KW2/Hzg4DHVewTwFeDAtn41cN64n//cbWrPaFXVZ4FHJx0HQFXtqKo72/JTwH10/8hJxFJVtaut7t9uE7uiIcmRwOuAj0wqhjXs29OPVNU/A3PTjyzGTwM3VdWjVfUYcBNw2hhjeRNw5Qrq26tFfD6cAVzejpdbgYOTHM7oX5cFY6mqv2x1AdxKNxZUb1bw2bmS99s0m9jzmvR3xyQ/n5N8L13SfxlAVf1zVT2+93uN1POAA5M8D/hu4B/GWPezTG2iNa2SrANeTncmaVIx7JfkLmAn3ZfGxGIBfgf4NeCZCcYwqIBPJ7kj3dQcq9kRwAMD6w8y/4f0v29NU9ckmRvccbH3HXUsJPkB4GjgMwPFL0hye5Jbk5y5gjgWa1i8o35dlup8ujNtcyb1fn1V637wZ0l+pJVN+rXpy1Q8rwl9d0zy8/lo4GvAH7emy48kOWgcFVfVduC/AX8P7ACeqKpPj6Pu+ZhoLUGSFwKfAN5eVU9OKo6qerqqjqf7ZXxikn87iTiS/Ayws6rumET9Q/x4VZ1A10RzQZKfmHRAPftfwLqq+lG6szObJxwPdINKXlNVTw+U/UB1U2H8B+B3kvybyYQ2OUl+ki7ResdA8STer3fS/T9eBnwI+J9jqHOfNonvjin4fH4eXRP2h6vq5cA3gLH0j0tyCN1Zy6OB7wcOSvIL46h7PiZai5Rkf7oD5YqqunbS8QC007C3sMKmjxU4GXh9km10p+NPSfLfJxQL8O1fMlTVTuA6umaD1WrB6Ueq6pGq+lZb/QjwisXed9SxDDiLPZoNB/4v9wOzdL/s+zQs3olM6ZLkR+n+P2dU1SNz5ZN4v1bVk3PdD6rqRmD/JIeydqe7mejzmuB3x6Q/nx8EHhxocbmGLvEah58CvlJVX6uq/wdcS9dXciJMtBYhSejame+rqvdPOJbDkhzclg8EXg38zSRiqap3VtWRVbWO7sv1M1U1sV8NSQ5K8qK5ZeA1wMSvWl2BBacfaf2O5ryerg8IdCNpvybJIe3X3WtaWW+xtHheStfJ/P8OlB2S5IC2fCjdF8C9K4hlMW4AzmlXH55E13Swg9G/LgtK8q/oPujPrqq/HSifyPs1yb9sn2kkOZHue+AR1u50NxN7XpP87pj053NVPQQ8kOSHWtGp9H/cz/l74KQk393+B6fync/GsetlCp5RSHIl3dUxhyZ5EHh3VV02oXBOBs4GtrS+UQDvar8Gx+1wYHOS/eg+IK+uqokPqzAlZoDr2nfI84A/rao/n2xIy1dDph9J8lvA7VV1A/Cfk7we2E3XAfq8dt9Hk7yH7ksG4LeqatkXlywyFug+0K+qqsELNH4Y+MMkz9C9Zy+uqhV94M73+UB3YQhV9QfAjXRXHm4Fvgm8pW0b6euyyFh+Hfg+4Pfbe3N3a0bt5f26iHjeAPzHJLuBfwTOav+vUU8LNRWGvXfHVP00fXdMwq8AV7QE937acdi3qrotyTV0zeS7gS8wwel4nIJHkiSpJzYdSpIk9cRES5IkqScmWpIkST0x0ZIkSeqJiZYkSVJPTLQkSZJ6YqIlSZLUk/8PPjPQaZrQQ/QAAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_train = train_df[\"Survived\"]\n",
        "X_test  = test_df.drop(\"PassengerId\", axis=1).copy()\n",
        "X_train.shape, Y_train.shape, X_test.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VjAfCPOTkqkC",
        "outputId": "561e7670-8478-423d-b349-32cbe57ca0f5"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((446, 8), (446,), (418, 8))"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tA_VXz_bNNks",
        "outputId": "8e210f22-386d-459f-ad73-e59b081d5db9"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2     1\n",
              "4     0\n",
              "5     0\n",
              "12    0\n",
              "14    0\n",
              "Name: Survived, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "logreg = LogisticRegression()\n",
        "logreg.fit(X_train, Y_train)\n",
        "Y_pred = logreg.predict(X_test)\n",
        "acc_log = round(logreg.score(X_train, Y_train) * 100, 2)\n",
        "acc_log"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I8K9IMJpkstn",
        "outputId": "43978939-c075-4ccf-98ce-ea2cc3f6533f"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "83.18"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "coeff_df = pd.DataFrame(train_df.columns.delete(0))\n",
        "coeff_df.columns = ['Feature']\n",
        "coeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n",
        "\n",
        "coeff_df.sort_values(by='Correlation', ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "uEEbWdX8kugV",
        "outputId": "480923e3-4337-4da7-c537-1fdfaf127e18"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Feature  Correlation\n",
              "1        Sex     1.181371\n",
              "4   Embarked     0.205674\n",
              "3       Fare     0.101817\n",
              "2        Age     0.080774\n",
              "6    IsAlone     0.000000\n",
              "5      Title    -0.084656\n",
              "7  Age*Class    -0.291612\n",
              "0     Pclass    -0.450538"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-68747126-fe95-4113-be90-92458474c5a8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Feature</th>\n",
              "      <th>Correlation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Sex</td>\n",
              "      <td>1.181371</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Embarked</td>\n",
              "      <td>0.205674</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Fare</td>\n",
              "      <td>0.101817</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Age</td>\n",
              "      <td>0.080774</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>IsAlone</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Title</td>\n",
              "      <td>-0.084656</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Age*Class</td>\n",
              "      <td>-0.291612</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Pclass</td>\n",
              "      <td>-0.450538</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-68747126-fe95-4113-be90-92458474c5a8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-68747126-fe95-4113-be90-92458474c5a8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-68747126-fe95-4113-be90-92458474c5a8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Support Vector Machines\n",
        "\n",
        "svc = SVC()\n",
        "svc.fit(X_train, Y_train)\n",
        "Y_pred = svc.predict(X_test)\n",
        "acc_svc = round(svc.score(X_train, Y_train) * 100, 2)\n",
        "acc_svc"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PxqTcn5fkyM_",
        "outputId": "1a1b9c6a-432f-4a7b-d7f7-4e79caa0412c"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "84.3"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "knn = KNeighborsClassifier(n_neighbors = 3)\n",
        "knn.fit(X_train, Y_train)\n",
        "Y_pred = knn.predict(X_test)\n",
        "acc_knn = round(knn.score(X_train, Y_train) * 100, 2)\n",
        "acc_knn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZpR8Q545k0Ui",
        "outputId": "cd2e8ca8-8634-409d-f567-b4aef2a6cc7e"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "83.41"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "gaussian = GaussianNB()\n",
        "gaussian.fit(X_train, Y_train)\n",
        "Y_pred = gaussian.predict(X_test)\n",
        "acc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\n",
        "acc_gaussian"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qF5MZ0YrlF-a",
        "outputId": "332dd52a-804c-470a-f421-f88657526359"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "79.82"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "perceptron = Perceptron()\n",
        "perceptron.fit(X_train, Y_train)\n",
        "Y_pred = perceptron.predict(X_test)\n",
        "acc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\n",
        "acc_perceptron\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Au8Rvg_slICz",
        "outputId": "4c73610c-b98c-4053-d822-dd99e048142c"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "75.56"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "linear_svc = LinearSVC()\n",
        "linear_svc.fit(X_train, Y_train)\n",
        "Y_pred = linear_svc.predict(X_test)\n",
        "acc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\n",
        "acc_linear_svc\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EFjAHS-RlJzG",
        "outputId": "473e0ca6-1a4b-40da-d567-800bb1c763c2"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "82.74"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sgd = SGDClassifier()\n",
        "sgd.fit(X_train, Y_train)\n",
        "Y_pred = sgd.predict(X_test)\n",
        "acc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\n",
        "acc_sgd"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mu9MkVmolL1x",
        "outputId": "af370c98-4a6d-4162-c7fb-1c92dcd8fede"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "82.29"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 1 - 2)"
      ],
      "metadata": {
        "id": "pkim90V6iI9u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "decision_tree = DecisionTreeClassifier(max_depth=12,criterion=\"entropy\")\n",
        "decision_tree.fit(X_train, Y_train)\n",
        "Y_pred = decision_tree.predict(X_test)\n",
        "acc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\n",
        "acc_decision_tree"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4P4XbCKzlN19",
        "outputId": "72f24ee5-07bd-4e30-b21d-c7771ad3a8ac"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "86.1"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 1 - 2) Plotting the Tree"
      ],
      "metadata": {
        "id": "KOmfqhQRiPpd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "target_names=[\"0\",\"1\"]\n",
        "from sklearn import tree\n",
        "fig = plt.figure(figsize=(25,20))\n",
        "_ = tree.plot_tree(decision_tree, \n",
        "                   feature_names=train_df.columns,  \n",
        "                   class_names=target_names,\n",
        "                   filled=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "I62wLhMu4VmJ",
        "outputId": "471c718c-3acf-462a-8d17-ad65a55f7e10"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x1440 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 1 - 3)"
      ],
      "metadata": {
        "id": "jLcDvEpSiWdP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from numpy import mean\n",
        "from numpy import std\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.model_selection import cross_val_score\n",
        "cv = KFold(n_splits=5, random_state=1, shuffle=True)\n",
        "scores = cross_val_score(decision_tree, X_train, Y_train, scoring='accuracy', cv=cv, n_jobs=-1)\n",
        "print('Accuracy: %.3f (%.3f)' % (mean(scores), std(scores)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UChZ4-PhCol5",
        "outputId": "687b65ec-0b49-4bc5-faf4-f99363425e64"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.812 (0.022)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "random_forest = RandomForestClassifier(n_estimators=100)\n",
        "random_forest.fit(X_train, Y_train)\n",
        "Y_pred = random_forest.predict(X_test)\n",
        "random_forest.score(X_train, Y_train)\n",
        "acc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\n",
        "acc_random_forest\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YWJd2Qg7lSix",
        "outputId": "92ec5c23-73fe-4fc0-d4f3-d6cd52db6b9d"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "86.1"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 1 - 4)"
      ],
      "metadata": {
        "id": "U4adNJvkigDB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from numpy import mean\n",
        "from numpy import std\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.model_selection import cross_val_score\n",
        "cv = KFold(n_splits=5, random_state=1, shuffle=True)\n",
        "\n",
        "scores = cross_val_score(random_forest, X_train, Y_train, scoring='accuracy', cv=cv, n_jobs=-1)\n",
        "print('Accuracy: %.3f (%.3f)' % (mean(scores), std(scores)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GCJ7s2ZKGFp9",
        "outputId": "14390753-a04f-43f8-9370-b6fdadcf017a"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.818 (0.024)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "models = pd.DataFrame({\n",
        "    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n",
        "              'Random Forest', 'Naive Bayes', 'Perceptron', \n",
        "              'Stochastic Gradient Decent', 'Linear SVC', \n",
        "              'Decision Tree'],\n",
        "    'Score': [acc_svc, acc_knn, acc_log, \n",
        "              acc_random_forest, acc_gaussian, acc_perceptron, \n",
        "              acc_sgd, acc_linear_svc, acc_decision_tree]})\n",
        "models.sort_values(by='Score', ascending=False)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "CfTBi2bQlVKN",
        "outputId": "b7a73a02-e00b-477f-fa6a-791ee8ef4006"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        Model  Score\n",
              "3               Random Forest  86.10\n",
              "8               Decision Tree  86.10\n",
              "0     Support Vector Machines  84.30\n",
              "1                         KNN  83.41\n",
              "2         Logistic Regression  83.18\n",
              "7                  Linear SVC  82.74\n",
              "6  Stochastic Gradient Decent  82.29\n",
              "4                 Naive Bayes  79.82\n",
              "5                  Perceptron  75.56"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4953b5a2-a479-4b72-a7b9-a6ecdf11ffe2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>86.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Decision Tree</td>\n",
              "      <td>86.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Support Vector Machines</td>\n",
              "      <td>84.30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KNN</td>\n",
              "      <td>83.41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>83.18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Linear SVC</td>\n",
              "      <td>82.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Stochastic Gradient Decent</td>\n",
              "      <td>82.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Naive Bayes</td>\n",
              "      <td>79.82</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Perceptron</td>\n",
              "      <td>75.56</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4953b5a2-a479-4b72-a7b9-a6ecdf11ffe2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4953b5a2-a479-4b72-a7b9-a6ecdf11ffe2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4953b5a2-a479-4b72-a7b9-a6ecdf11ffe2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "6XapFPGelXO9"
      },
      "execution_count": 63,
      "outputs": []
    }
  ]
}